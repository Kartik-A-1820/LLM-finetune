{"instruction": "Convert categorical column 'status' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['status'])\nprint(data_clean_ohe.head())"}
{"instruction": "Show the first 5 rows of sales_df.", "output": "print(sales_df.head())"}
{"instruction": "Drop rows where 'value' is null in df.", "output": "df = df.dropna(subset=['value'])"}
{"instruction": "Drop rows where 'salary' is null in df1.", "output": "df1 = df1.dropna(subset=['salary'])"}
{"instruction": "Count missing values per column in data_clean.", "output": "missing = data_clean.isnull().sum()\nprint(missing)"}
{"instruction": "Plot a boxplot of 'score' grouped by 'category' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='score', data=data_raw)\nplt.title('Boxplot of score by category')\nplt.show()"}
{"instruction": "Count unique values in 'price' of sales_df.", "output": "unique_count = sales_df['price'].nunique()\nprint(unique_count)"}
{"instruction": "Filter sales_df for rows where 'revenue' > 100.", "output": "sales_df_filtered = sales_df[sales_df['revenue'] > 100]"}
{"instruction": "Concatenate df1 and df2 into df and reset index.", "output": "df = pd.concat([df1, df2], ignore_index=True)\nprint(df.shape)"}
{"instruction": "Show the first 5 rows of data.", "output": "print(data.head())"}
{"instruction": "Create a seaborn pairplot of numeric columns in data_raw.", "output": "import seaborn as sns\nsns.pairplot(data_raw[['count', 'duration', 'value']].dropna())\nplt.show()"}
{"instruction": "Group data_clean by 'city' and calculate mean of 'revenue'.", "output": "grouped = data_clean.groupby('city')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'speed' of df1 with the median.", "output": "df1['speed'] = df1['speed'].fillna(df1['speed'].median())"}
{"instruction": "Create a seaborn pairplot of numeric columns in data_clean.", "output": "import seaborn as sns\nsns.pairplot(data_clean[['sales', 'revenue', 'salary']].dropna())\nplt.show()"}
{"instruction": "Visualize correlation heatmap for numeric columns in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df_data[['sales', 'count', 'age']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Create a seaborn pairplot of numeric columns in dataset.", "output": "import seaborn as sns\nsns.pairplot(dataset[['income', 'revenue', 'score']].dropna())\nplt.show()"}
{"instruction": "Visualize correlation heatmap for numeric columns in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df2[['value', 'age', 'revenue']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Plot a boxplot of 'height' grouped by 'group' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='height', data=sales_df)\nplt.title('Boxplot of height by group')\nplt.show()"}
{"instruction": "Rename column 'revenue' in data_raw to 'new_revenue'.", "output": "data_raw = data_raw.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in data_clean.", "output": "data_clean['count_rolling'] = data_clean['count'].rolling(window=5).mean()"}
{"instruction": "Count unique values in 'quantity' of data_raw.", "output": "unique_count = data_raw['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Merge df1 with df2 on 'speed' with inner join.", "output": "merged = df1.merge(df2, on='speed', how='inner')\nprint(merged.head())"}
{"instruction": "Concatenate df1 and df2 into data_raw and reset index.", "output": "data_raw = pd.concat([df1, df2], ignore_index=True)\nprint(data_raw.shape)"}
{"instruction": "Calculate the correlation matrix of data_clean.", "output": "corr = data_clean.corr()\nprint(corr)"}
{"instruction": "Fill missing values in 'score' of sales_df with the median.", "output": "sales_df['score'] = sales_df['score'].fillna(sales_df['score'].median())"}
{"instruction": "Drop rows where 'price' is null in df1.", "output": "df1 = df1.dropna(subset=['price'])"}
{"instruction": "Create a pivot table from df1 with index 'status' and values 'score'.", "output": "pivot = df1.pivot_table(index='status', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Drop rows where 'age' is null in data.", "output": "data = data.dropna(subset=['age'])"}
{"instruction": "Find the top 3 rows in data_raw with highest 'height'.", "output": "top3 = data_raw.nlargest(3, 'height')\nprint(top3)"}
{"instruction": "Generate descriptive statistics for numeric columns in data_clean.", "output": "print(data_clean.describe())"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in df_data.", "output": "import pandas as pd\ndf_data['order_date'] = pd.to_datetime(df_data['order_date'])\nresampled = df_data.set_index('order_date').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in data_raw.", "output": "data_raw['rating_rolling'] = data_raw['rating'].rolling(window=5).mean()"}
{"instruction": "Plot a boxplot of 'count' grouped by 'type' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='count', data=dataset)\nplt.title('Boxplot of count by type')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'score' monthly in data.", "output": "import pandas as pd\ndata['timestamp'] = pd.to_datetime(data['timestamp'])\nresampled = data.set_index('timestamp').resample('M')['score'].sum()\nprint(resampled)"}
{"instruction": "Generate descriptive statistics for numeric columns in df1.", "output": "print(df1.describe())"}
{"instruction": "Filter dataset for rows where 'weight' contains 'A'.", "output": "dataset_sub = dataset[dataset['weight'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Concatenate df1 and df2 into df1 and reset index.", "output": "df1 = pd.concat([df1, df2], ignore_index=True)\nprint(df1.shape)"}
{"instruction": "Create a seaborn pairplot of numeric columns in df_sales.", "output": "import seaborn as sns\nsns.pairplot(df_sales[['price', 'speed', 'value']].dropna())\nplt.show()"}
{"instruction": "Rename column 'value' in df2 to 'new_value'.", "output": "df2 = df2.rename(columns={'value': 'new_value'})"}
{"instruction": "Drop rows where 'score' is null in data.", "output": "data = data.dropna(subset=['score'])"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'class' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='salary', data=data)\nplt.title('Boxplot of salary by class')\nplt.show()"}
{"instruction": "Convert 'duration' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['duration'] = pd.to_datetime(df_data['duration'])"}
{"instruction": "Find the top 3 rows in sales_df with highest 'speed'.", "output": "top3 = sales_df.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Fill missing values in 'rating' of df2 with the median.", "output": "df2['rating'] = df2['rating'].fillna(df2['rating'].median())"}
{"instruction": "Concatenate df1 and df2 into df_sales and reset index.", "output": "df_sales = pd.concat([df1, df2], ignore_index=True)\nprint(df_sales.shape)"}
{"instruction": "Count unique values in 'duration' of data_clean.", "output": "unique_count = data_clean['duration'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'income' of data_raw with the median.", "output": "data_raw['income'] = data_raw['income'].fillna(data_raw['income'].median())"}
{"instruction": "Show the first 5 rows of df2.", "output": "print(df2.head())"}
{"instruction": "Plot a boxplot of 'height' grouped by 'region' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='height', data=df_data)\nplt.title('Boxplot of height by region')\nplt.show()"}
{"instruction": "Drop rows where 'duration' is null in df.", "output": "df = df.dropna(subset=['duration'])"}
{"instruction": "Convert categorical column 'city' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['city'])\nprint(dataset_ohe.head())"}
{"instruction": "Perform EDA on data: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(data.isnull().sum())\nprint(data.describe())\nfor col in ['quantity', 'salary', 'height']:\n    plt.hist(data[col].dropna(), bins=10)\n    plt.title(f'Histogram of income')\n    plt.show()"}
{"instruction": "Create a pivot table from df2 with index 'class' and values 'value'.", "output": "pivot = df2.pivot_table(index='class', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Remove duplicate rows from df1.", "output": "df1 = df1.drop_duplicates()"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in data.", "output": "import pandas as pd\ndata['timestamp'] = pd.to_datetime(data['timestamp'])\nresampled = data.set_index('timestamp').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Fill missing values in 'income' of sales_df with the median.", "output": "sales_df['income'] = sales_df['income'].fillna(sales_df['income'].median())"}
{"instruction": "Sort df by 'rating' descending.", "output": "df = df.sort_values(by='rating', ascending=False)"}
{"instruction": "Rename column 'rating' in sales_df to 'new_rating'.", "output": "sales_df = sales_df.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Drop rows where 'duration' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['duration'])"}
{"instruction": "Convert 'salary' in data to datetime format.", "output": "import pandas as pd\ndata['salary'] = pd.to_datetime(data['salary'])"}
{"instruction": "Plot value counts of 'city' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in sales_df, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['sale_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'city' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='salary', data=df)\nplt.title('Boxplot of salary by city')\nplt.show()"}
{"instruction": "Remove duplicate rows from dataset.", "output": "dataset = dataset.drop_duplicates()"}
{"instruction": "Filter df_data for rows where 'quantity' > 100.", "output": "df_data_filtered = df_data[df_data['quantity'] > 100]"}
{"instruction": "Count unique values in 'speed' of df1.", "output": "unique_count = df1['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df2 for rows where 'revenue' > 100.", "output": "df2_filtered = df2[df2['revenue'] > 100]"}
{"instruction": "Show the first 5 rows of df_sales.", "output": "print(df_sales.head())"}
{"instruction": "Sort df_sales by 'sales' descending.", "output": "df_sales = df_sales.sort_values(by='sales', ascending=False)"}
{"instruction": "Group data_clean by 'status' and calculate mean of 'revenue'.", "output": "grouped = data_clean.groupby('status')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Remove duplicate rows from df.", "output": "df = df.drop_duplicates()"}
{"instruction": "Extract year and month from 'timestamp' in df, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['timestamp']).dt.to_period('M')\nmonthly = df.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Remove duplicate rows from data_raw.", "output": "data_raw = data_raw.drop_duplicates()"}
{"instruction": "Plot value counts of 'group' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Create a pivot table from dataset with index 'region' and values 'salary'.", "output": "pivot = dataset.pivot_table(index='region', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Perform EDA on df1: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(df1.isnull().sum())\nprint(df1.describe())\nfor col in ['score', 'salary', 'quantity']:\n    plt.hist(df1[col].dropna(), bins=10)\n    plt.title(f'Histogram of duration')\n    plt.show()"}
{"instruction": "Filter data_raw for rows where 'rating' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['rating'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Remove duplicate rows from sales_df.", "output": "sales_df = sales_df.drop_duplicates()"}
{"instruction": "Count missing values per column in df_sales.", "output": "missing = df_sales.isnull().sum()\nprint(missing)"}
{"instruction": "Perform time series resampling: sum 'value' monthly in df2.", "output": "import pandas as pd\ndf2['sale_date'] = pd.to_datetime(df2['sale_date'])\nresampled = df2.set_index('sale_date').resample('M')['value'].sum()\nprint(resampled)"}
{"instruction": "Perform EDA on sales_df: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(sales_df.isnull().sum())\nprint(sales_df.describe())\nfor col in ['speed', 'revenue', 'age']:\n    plt.hist(sales_df[col].dropna(), bins=10)\n    plt.title(f'Histogram of revenue')\n    plt.show()"}
{"instruction": "Group data_clean by 'city' and calculate mean of 'height'.", "output": "grouped = data_clean.groupby('city')['height'].mean()\nprint(grouped)"}
{"instruction": "Find the top 3 rows in dataset with highest 'age'.", "output": "top3 = dataset.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Generate descriptive statistics for numeric columns in df.", "output": "print(df.describe())"}
{"instruction": "Create a seaborn pairplot of numeric columns in sales_df.", "output": "import seaborn as sns\nsns.pairplot(sales_df[['duration', 'income', 'salary']].dropna())\nplt.show()"}
{"instruction": "Drop rows where 'score' is null in dataset.", "output": "dataset = dataset.dropna(subset=['score'])"}
{"instruction": "Group sales_df by 'status' and calculate mean of 'rating'.", "output": "grouped = sales_df.groupby('status')['rating'].mean()\nprint(grouped)"}
{"instruction": "Group df_sales by 'group' and calculate mean of 'height'.", "output": "grouped = df_sales.groupby('group')['height'].mean()\nprint(grouped)"}
{"instruction": "Convert 'price' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['price'] = pd.to_datetime(df_sales['price'])"}
{"instruction": "Extract year and month from 'timestamp' in df_sales, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['timestamp']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Group df1 by 'category' and calculate mean of 'salary'.", "output": "grouped = df1.groupby('category')['salary'].mean()\nprint(grouped)"}
{"instruction": "Count missing values per column in sales_df.", "output": "missing = sales_df.isnull().sum()\nprint(missing)"}
{"instruction": "Calculate the correlation matrix of data_raw.", "output": "corr = data_raw.corr()\nprint(corr)"}
{"instruction": "Filter data_clean for rows where 'count' > 100.", "output": "data_clean_filtered = data_clean[data_clean['count'] > 100]"}
{"instruction": "Sort data_raw by 'age' descending.", "output": "data_raw = data_raw.sort_values(by='age', ascending=False)"}
{"instruction": "Remove duplicate rows from data.", "output": "data = data.drop_duplicates()"}
{"instruction": "Fill missing values in 'speed' of df_data with the median.", "output": "df_data['speed'] = df_data['speed'].fillna(df_data['speed'].median())"}
{"instruction": "Count unique values in 'age' of df.", "output": "unique_count = df['age'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'sales' of data with the median.", "output": "data['sales'] = data['sales'].fillna(data['sales'].median())"}
{"instruction": "Rename column 'revenue' in dataset to 'new_revenue'.", "output": "dataset = dataset.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Filter df2 for rows where 'duration' > 100.", "output": "df2_filtered = df2[df2['duration'] > 100]"}
{"instruction": "Rename column 'quantity' in data to 'new_quantity'.", "output": "data = data.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'city' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='quantity', data=df)\nplt.title('Boxplot of quantity by city')\nplt.show()"}
{"instruction": "Remove duplicate rows from df2.", "output": "df2 = df2.drop_duplicates()"}
{"instruction": "Visualize correlation heatmap for numeric columns in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df_sales[['sales', 'income', 'score']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Convert categorical column 'group' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['group'])\nprint(df_ohe.head())"}
{"instruction": "Generate descriptive statistics for numeric columns in data.", "output": "print(data.describe())"}
{"instruction": "Create a seaborn pairplot of numeric columns in df1.", "output": "import seaborn as sns\nsns.pairplot(df1[['salary', 'count', 'duration']].dropna())\nplt.show()"}
{"instruction": "Perform EDA on data_raw: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(data_raw.isnull().sum())\nprint(data_raw.describe())\nfor col in ['salary', 'revenue', 'income']:\n    plt.hist(data_raw[col].dropna(), bins=10)\n    plt.title(f'Histogram of quantity')\n    plt.show()"}
{"instruction": "Sort df2 by 'weight' descending.", "output": "df2 = df2.sort_values(by='weight', ascending=False)"}
{"instruction": "Merge df1 with df2 on 'score' with inner join.", "output": "merged = df1.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Filter sales_df for rows where 'weight' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['weight'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Drop rows where 'age' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['age'])"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in data.", "output": "data['speed_rolling'] = data['speed'].rolling(window=5).mean()"}
{"instruction": "Filter data_raw for rows where 'revenue' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['revenue'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Extract year and month from 'sale_date' in data_raw, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['sale_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in df1.", "output": "import pandas as pd\ndf1['timestamp'] = pd.to_datetime(df1['timestamp'])\nresampled = df1.set_index('timestamp').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Rename column 'duration' in data_raw to 'new_duration'.", "output": "data_raw = data_raw.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Perform time series resampling: sum 'price' monthly in dataset.", "output": "import pandas as pd\ndataset['order_date'] = pd.to_datetime(dataset['order_date'])\nresampled = dataset.set_index('order_date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Sort df_sales by 'salary' descending.", "output": "df_sales = df_sales.sort_values(by='salary', ascending=False)"}
{"instruction": "Rename column 'count' in sales_df to 'new_count'.", "output": "sales_df = sales_df.rename(columns={'count': 'new_count'})"}
{"instruction": "Plot value counts of 'city' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Convert categorical column 'class' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['class'])\nprint(dataset_ohe.head())"}
{"instruction": "Sort sales_df by 'score' descending.", "output": "sales_df = sales_df.sort_values(by='score', ascending=False)"}
{"instruction": "Create a pivot table from df1 with index 'status' and values 'value'.", "output": "pivot = df1.pivot_table(index='status', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_raw for rows where 'sales' > 100.", "output": "data_raw_filtered = data_raw[data_raw['sales'] > 100]"}
{"instruction": "Convert 'salary' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['salary'] = pd.to_datetime(data_clean['salary'])"}
{"instruction": "Plot value counts of 'group' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Filter dataset for rows where 'speed' > 100.", "output": "dataset_filtered = dataset[dataset['speed'] > 100]"}
{"instruction": "Convert 'score' in data to datetime format.", "output": "import pandas as pd\ndata['score'] = pd.to_datetime(data['score'])"}
{"instruction": "Show the first 5 rows of df1.", "output": "print(df1.head())"}
{"instruction": "Perform EDA on df_sales: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(df_sales.isnull().sum())\nprint(df_sales.describe())\nfor col in ['score', 'price', 'salary']:\n    plt.hist(df_sales[col].dropna(), bins=10)\n    plt.title(f'Histogram of speed')\n    plt.show()"}
{"instruction": "Create a pivot table from df_sales with index 'status' and values 'price'.", "output": "pivot = df_sales.pivot_table(index='status', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count missing values per column in data.", "output": "missing = data.isnull().sum()\nprint(missing)"}
{"instruction": "Count missing values per column in df1.", "output": "missing = df1.isnull().sum()\nprint(missing)"}
{"instruction": "Fill missing values in 'sales' of df with the median.", "output": "df['sales'] = df['sales'].fillna(df['sales'].median())"}
{"instruction": "Convert 'count' in df2 to datetime format.", "output": "import pandas as pd\ndf2['count'] = pd.to_datetime(df2['count'])"}
{"instruction": "Sort data by 'age' descending.", "output": "data = data.sort_values(by='age', ascending=False)"}
{"instruction": "Plot value counts of 'group' in data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Concatenate df1 and df2 into dataset and reset index.", "output": "dataset = pd.concat([df1, df2], ignore_index=True)\nprint(dataset.shape)"}
{"instruction": "Merge df with df2 on 'count' with inner join.", "output": "merged = df.merge(df2, on='count', how='inner')\nprint(merged.head())"}
{"instruction": "Remove duplicate rows from data_clean.", "output": "data_clean = data_clean.drop_duplicates()"}
{"instruction": "Remove duplicate rows from df_data.", "output": "df_data = df_data.drop_duplicates()"}
{"instruction": "Find the top 3 rows in data with highest 'weight'.", "output": "top3 = data.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Visualize correlation heatmap for numeric columns in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df1[['duration', 'price', 'value']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'age' contains 'A'.", "output": "df2_sub = df2[df2['age'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Count unique values in 'age' of data.", "output": "unique_count = data['age'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'income' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['income'])"}
{"instruction": "Visualize correlation heatmap for numeric columns in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = data_raw[['height', 'count', 'value']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Fill missing values in 'age' of df_sales with the median.", "output": "df_sales['age'] = df_sales['age'].fillna(df_sales['age'].median())"}
{"instruction": "Show the first 5 rows of df.", "output": "print(df.head())"}
{"instruction": "Sort sales_df by 'value' descending.", "output": "sales_df = sales_df.sort_values(by='value', ascending=False)"}
{"instruction": "Plot value counts of 'category' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Sort df_sales by 'value' descending.", "output": "df_sales = df_sales.sort_values(by='value', ascending=False)"}
{"instruction": "Filter data for rows where 'rating' contains 'A'.", "output": "data_sub = data[data['rating'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Extract year and month from 'date' in dataset, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Create a seaborn pairplot of numeric columns in df_data.", "output": "import seaborn as sns\nsns.pairplot(df_data[['sales', 'value', 'rating']].dropna())\nplt.show()"}
{"instruction": "Rename column 'age' in data_raw to 'new_age'.", "output": "data_raw = data_raw.rename(columns={'age': 'new_age'})"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in data_clean.", "output": "data_clean['weight_rolling'] = data_clean['weight'].rolling(window=5).mean()"}
{"instruction": "Calculate the correlation matrix of df_sales.", "output": "corr = df_sales.corr()\nprint(corr)"}
{"instruction": "Convert 'income' in df2 to datetime format.", "output": "import pandas as pd\ndf2['income'] = pd.to_datetime(df2['income'])"}
{"instruction": "Perform time series resampling: sum 'count' monthly in sales_df.", "output": "import pandas as pd\nsales_df['date'] = pd.to_datetime(sales_df['date'])\nresampled = sales_df.set_index('date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Remove duplicate rows from df_sales.", "output": "df_sales = df_sales.drop_duplicates()"}
{"instruction": "Filter df for rows where 'speed' > 100.", "output": "df_filtered = df[df['speed'] > 100]"}
{"instruction": "Group df by 'class' and calculate mean of 'price'.", "output": "grouped = df.groupby('class')['price'].mean()\nprint(grouped)"}
{"instruction": "Filter df1 for rows where 'count' contains 'A'.", "output": "df1_sub = df1[df1['count'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Convert 'income' in df to datetime format.", "output": "import pandas as pd\ndf['income'] = pd.to_datetime(df['income'])"}
{"instruction": "Sort df1 by 'speed' descending.", "output": "df1 = df1.sort_values(by='speed', ascending=False)"}
{"instruction": "Visualize correlation heatmap for numeric columns in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df[['score', 'height', 'income']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Create a seaborn pairplot of numeric columns in data.", "output": "import seaborn as sns\nsns.pairplot(data[['duration', 'rating', 'quantity']].dropna())\nplt.show()"}
{"instruction": "Extract year and month from 'order_date' in data_raw, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['order_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'price' > 100.", "output": "df2_filtered = df2[df2['price'] > 100]"}
{"instruction": "Filter data_raw for rows where 'age' > 100.", "output": "data_raw_filtered = data_raw[data_raw['age'] > 100]"}
{"instruction": "Fill missing values in 'rating' of data with the median.", "output": "data['rating'] = data['rating'].fillna(data['rating'].median())"}
{"instruction": "Convert categorical column 'category' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['category'])\nprint(data_clean_ohe.head())"}
{"instruction": "Create a pivot table from sales_df with index 'region' and values 'age'.", "output": "pivot = sales_df.pivot_table(index='region', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'speed' of data with the median.", "output": "data['speed'] = data['speed'].fillna(data['speed'].median())"}
{"instruction": "Rename column 'income' in dataset to 'new_income'.", "output": "dataset = dataset.rename(columns={'income': 'new_income'})"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['timestamp'] = pd.to_datetime(df_sales['timestamp'])\nresampled = df_sales.set_index('timestamp').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Count missing values per column in df_data.", "output": "missing = df_data.isnull().sum()\nprint(missing)"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in dataset.", "output": "import pandas as pd\ndataset['order_date'] = pd.to_datetime(dataset['order_date'])\nresampled = dataset.set_index('order_date').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Show the first 5 rows of data_clean.", "output": "print(data_clean.head())"}
{"instruction": "Convert 'weight' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['weight'] = pd.to_datetime(sales_df['weight'])"}
{"instruction": "Perform EDA on df_data: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(df_data.isnull().sum())\nprint(df_data.describe())\nfor col in ['score', 'salary', 'income']:\n    plt.hist(df_data[col].dropna(), bins=10)\n    plt.title(f'Histogram of price')\n    plt.show()"}
{"instruction": "Create a pivot table from data_raw with index 'department' and values 'quantity'.", "output": "pivot = data_raw.pivot_table(index='department', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in data with highest 'age'.", "output": "top3 = data.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Concatenate df1 and df2 into data_clean and reset index.", "output": "data_clean = pd.concat([df1, df2], ignore_index=True)\nprint(data_clean.shape)"}
{"instruction": "Calculate the correlation matrix of df.", "output": "corr = df.corr()\nprint(corr)"}
{"instruction": "Filter df_sales for rows where 'income' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['income'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Count unique values in 'age' of df2.", "output": "unique_count = df2['age'].nunique()\nprint(unique_count)"}
{"instruction": "Concatenate df1 and df2 into df_data and reset index.", "output": "df_data = pd.concat([df1, df2], ignore_index=True)\nprint(df_data.shape)"}
{"instruction": "Drop rows where 'speed' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['speed'])"}
{"instruction": "Filter data for rows where 'revenue' contains 'A'.", "output": "data_sub = data[data['revenue'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'department' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='speed', data=df)\nplt.title('Boxplot of speed by department')\nplt.show()"}
{"instruction": "Drop rows where 'height' is null in df.", "output": "df = df.dropna(subset=['height'])"}
{"instruction": "Generate descriptive statistics for numeric columns in df2.", "output": "print(df2.describe())"}
{"instruction": "Drop rows where 'age' is null in df_data.", "output": "df_data = df_data.dropna(subset=['age'])"}
{"instruction": "Create a pivot table from df_data with index 'category' and values 'weight'.", "output": "pivot = df_data.pivot_table(index='category', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Perform time series resampling: sum 'salary' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['sale_date'] = pd.to_datetime(df_sales['sale_date'])\nresampled = df_sales.set_index('sale_date').resample('M')['salary'].sum()\nprint(resampled)"}
{"instruction": "Fill missing values in 'revenue' of df2 with the median.", "output": "df2['revenue'] = df2['revenue'].fillna(df2['revenue'].median())"}
{"instruction": "Drop rows where 'rating' is null in df.", "output": "df = df.dropna(subset=['rating'])"}
{"instruction": "Rename column 'duration' in data_clean to 'new_duration'.", "output": "data_clean = data_clean.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Show the first 5 rows of dataset.", "output": "print(dataset.head())"}
{"instruction": "Concatenate df1 and df2 into df2 and reset index.", "output": "df2 = pd.concat([df1, df2], ignore_index=True)\nprint(df2.shape)"}
{"instruction": "Fill missing values in 'score' of df_sales with the median.", "output": "df_sales['score'] = df_sales['score'].fillna(df_sales['score'].median())"}
{"instruction": "Rename column 'sales' in data to 'new_sales'.", "output": "data = data.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Find the top 3 rows in dataset with highest 'sales'.", "output": "top3 = dataset.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Fill missing values in 'quantity' of df2 with the median.", "output": "df2['quantity'] = df2['quantity'].fillna(df2['quantity'].median())"}
{"instruction": "Rename column 'rating' in df_sales to 'new_rating'.", "output": "df_sales = df_sales.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Rename column 'sales' in dataset to 'new_sales'.", "output": "dataset = dataset.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Rename column 'salary' in sales_df to 'new_salary'.", "output": "sales_df = sales_df.rename(columns={'salary': 'new_salary'})"}
{"instruction": "Sort df by 'age' descending.", "output": "df = df.sort_values(by='age', ascending=False)"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'group' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='sales', data=df_sales)\nplt.title('Boxplot of sales by group')\nplt.show()"}
{"instruction": "Rename column 'score' in data to 'new_score'.", "output": "data = data.rename(columns={'score': 'new_score'})"}
{"instruction": "Sort df_sales by 'quantity' descending.", "output": "df_sales = df_sales.sort_values(by='quantity', ascending=False)"}
{"instruction": "Group dataset by 'region' and calculate mean of 'score'.", "output": "grouped = dataset.groupby('region')['score'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'order_date' in df_sales, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['order_date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Convert 'price' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['price'] = pd.to_datetime(df_data['price'])"}
{"instruction": "Filter data for rows where 'revenue' > 100.", "output": "data_filtered = data[data['revenue'] > 100]"}
{"instruction": "Plot a boxplot of 'height' grouped by 'group' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='height', data=data)\nplt.title('Boxplot of height by group')\nplt.show()"}
{"instruction": "Generate descriptive statistics for numeric columns in sales_df.", "output": "print(sales_df.describe())"}
{"instruction": "Sort data by 'salary' descending.", "output": "data = data.sort_values(by='salary', ascending=False)"}
{"instruction": "Count missing values per column in dataset.", "output": "missing = dataset.isnull().sum()\nprint(missing)"}
{"instruction": "Merge data_clean with df2 on 'value' with inner join.", "output": "merged = data_clean.merge(df2, on='value', how='inner')\nprint(merged.head())"}
{"instruction": "Group df_data by 'department' and calculate mean of 'value'.", "output": "grouped = df_data.groupby('department')['value'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'age' of data_raw with the median.", "output": "data_raw['age'] = data_raw['age'].fillna(data_raw['age'].median())"}
{"instruction": "Convert 'weight' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['weight'] = pd.to_datetime(data_raw['weight'])"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in df2.", "output": "import pandas as pd\ndf2['sale_date'] = pd.to_datetime(df2['sale_date'])\nresampled = df2.set_index('sale_date').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in sales_df.", "output": "import pandas as pd\nsales_df['order_date'] = pd.to_datetime(sales_df['order_date'])\nresampled = sales_df.set_index('order_date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Plot value counts of 'department' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Drop rows where 'sales' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['sales'])"}
{"instruction": "Merge df_sales with df2 on 'price' with inner join.", "output": "merged = df_sales.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Calculate the correlation matrix of data.", "output": "corr = data.corr()\nprint(corr)"}
{"instruction": "Filter sales_df for rows where 'value' > 100.", "output": "sales_df_filtered = sales_df[sales_df['value'] > 100]"}
{"instruction": "Calculate the correlation matrix of df2.", "output": "corr = df2.corr()\nprint(corr)"}
{"instruction": "Fill missing values in 'score' of df1 with the median.", "output": "df1['score'] = df1['score'].fillna(df1['score'].median())"}
{"instruction": "Group df_sales by 'class' and calculate mean of 'speed'.", "output": "grouped = df_sales.groupby('class')['speed'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'count' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['count'])"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in data.", "output": "data['revenue_rolling'] = data['revenue'].rolling(window=5).mean()"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in df_data.", "output": "df_data['weight_rolling'] = df_data['weight'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df with highest 'revenue'.", "output": "top3 = df.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Extract year and month from 'sale_date' in df1, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['sale_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Convert 'count' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['count'] = pd.to_datetime(df_sales['count'])"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'status' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='salary', data=df_data)\nplt.title('Boxplot of salary by status')\nplt.show()"}
{"instruction": "Drop rows where 'count' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['count'])"}
{"instruction": "Sort data_raw by 'weight' descending.", "output": "data_raw = data_raw.sort_values(by='weight', ascending=False)"}
{"instruction": "Perform EDA on dataset: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(dataset.isnull().sum())\nprint(dataset.describe())\nfor col in ['revenue', 'income', 'speed']:\n    plt.hist(dataset[col].dropna(), bins=10)\n    plt.title(f'Histogram of quantity')\n    plt.show()"}
{"instruction": "Fill missing values in 'salary' of sales_df with the median.", "output": "sales_df['salary'] = sales_df['salary'].fillna(sales_df['salary'].median())"}
{"instruction": "Convert categorical column 'type' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['type'])\nprint(data_raw_ohe.head())"}
{"instruction": "Find the top 3 rows in df2 with highest 'revenue'.", "output": "top3 = df2.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Convert 'value' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['value'] = pd.to_datetime(df_data['value'])"}
{"instruction": "Filter sales_df for rows where 'age' > 100.", "output": "sales_df_filtered = sales_df[sales_df['age'] > 100]"}
{"instruction": "Sort dataset by 'duration' descending.", "output": "dataset = dataset.sort_values(by='duration', ascending=False)"}
{"instruction": "Filter df2 for rows where 'value' > 100.", "output": "df2_filtered = df2[df2['value'] > 100]"}
{"instruction": "Create a pivot table from df1 with index 'department' and values 'rating'.", "output": "pivot = df1.pivot_table(index='department', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Visualize correlation heatmap for numeric columns in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = dataset[['value', 'score', 'sales']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Count unique values in 'score' of sales_df.", "output": "unique_count = sales_df['score'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from df2 with index 'status' and values 'income'.", "output": "pivot = df2.pivot_table(index='status', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group data by 'group' and calculate mean of 'score'.", "output": "grouped = data.groupby('group')['score'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'sales' in df2 to 'new_sales'.", "output": "df2 = df2.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Fill missing values in 'sales' of df_sales with the median.", "output": "df_sales['sales'] = df_sales['sales'].fillna(df_sales['sales'].median())"}
{"instruction": "Create a pivot table from df1 with index 'class' and values 'price'.", "output": "pivot = df1.pivot_table(index='class', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_clean for rows where 'salary' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['salary'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Find the top 3 rows in df_data with highest 'quantity'.", "output": "top3 = df_data.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Count unique values in 'value' of df.", "output": "unique_count = df['value'].nunique()\nprint(unique_count)"}
{"instruction": "Concatenate df1 and df2 into data and reset index.", "output": "data = pd.concat([df1, df2], ignore_index=True)\nprint(data.shape)"}
{"instruction": "Sort data by 'quantity' descending.", "output": "data = data.sort_values(by='quantity', ascending=False)"}
{"instruction": "Drop rows where 'count' is null in dataset.", "output": "dataset = dataset.dropna(subset=['count'])"}
{"instruction": "Count unique values in 'salary' of df1.", "output": "unique_count = df1['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'height' of sales_df.", "output": "unique_count = sales_df['height'].nunique()\nprint(unique_count)"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in df_data.", "output": "df_data['speed_rolling'] = df_data['speed'].rolling(window=5).mean()"}
{"instruction": "Convert 'score' in df to datetime format.", "output": "import pandas as pd\ndf['score'] = pd.to_datetime(df['score'])"}
{"instruction": "Convert 'age' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['age'] = pd.to_datetime(data_raw['age'])"}
{"instruction": "Merge data_raw with df2 on 'value' with inner join.", "output": "merged = data_raw.merge(df2, on='value', how='inner')\nprint(merged.head())"}
{"instruction": "Extract year and month from 'date' in sales_df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Group df1 by 'status' and calculate mean of 'revenue'.", "output": "grouped = df1.groupby('status')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'rating' in df_data to 'new_rating'.", "output": "df_data = df_data.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Fill missing values in 'income' of dataset with the median.", "output": "dataset['income'] = dataset['income'].fillna(dataset['income'].median())"}
{"instruction": "Convert categorical column 'category' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['category'])\nprint(df_ohe.head())"}
{"instruction": "Filter data_raw for rows where 'age' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['age'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Merge data with df2 on 'quantity' with inner join.", "output": "merged = data.merge(df2, on='quantity', how='inner')\nprint(merged.head())"}
{"instruction": "Filter dataset for rows where 'revenue' > 100.", "output": "dataset_filtered = dataset[dataset['revenue'] > 100]"}
{"instruction": "Drop rows where 'weight' is null in df_data.", "output": "df_data = df_data.dropna(subset=['weight'])"}
{"instruction": "Find the top 3 rows in df_sales with highest 'score'.", "output": "top3 = df_sales.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Sort dataset by 'age' descending.", "output": "dataset = dataset.sort_values(by='age', ascending=False)"}
{"instruction": "Plot value counts of 'region' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Fill missing values in 'rating' of data_clean with the median.", "output": "data_clean['rating'] = data_clean['rating'].fillna(data_clean['rating'].median())"}
{"instruction": "Filter df_sales for rows where 'score' > 100.", "output": "df_sales_filtered = df_sales[df_sales['score'] > 100]"}
{"instruction": "Filter sales_df for rows where 'price' > 100.", "output": "sales_df_filtered = sales_df[sales_df['price'] > 100]"}
{"instruction": "Rename column 'sales' in sales_df to 'new_sales'.", "output": "sales_df = sales_df.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Convert categorical column 'type' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['type'])\nprint(df2_ohe.head())"}
{"instruction": "Fill missing values in 'quantity' of sales_df with the median.", "output": "sales_df['quantity'] = sales_df['quantity'].fillna(sales_df['quantity'].median())"}
{"instruction": "Sort df2 by 'quantity' descending.", "output": "df2 = df2.sort_values(by='quantity', ascending=False)"}
{"instruction": "Filter data for rows where 'sales' > 100.", "output": "data_filtered = data[data['sales'] > 100]"}
{"instruction": "Drop rows where 'rating' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['rating'])"}
{"instruction": "Show the first 5 rows of data_raw.", "output": "print(data_raw.head())"}
{"instruction": "Count unique values in 'income' of df.", "output": "unique_count = df['income'].nunique()\nprint(unique_count)"}
{"instruction": "Find the top 3 rows in df_data with highest 'value'.", "output": "top3 = df_data.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Rename column 'quantity' in df2 to 'new_quantity'.", "output": "df2 = df2.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Perform time series resampling: sum 'count' monthly in data.", "output": "import pandas as pd\ndata['date'] = pd.to_datetime(data['date'])\nresampled = data.set_index('date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Convert categorical column 'region' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['region'])\nprint(df2_ohe.head())"}
{"instruction": "Calculate the correlation matrix of df_data.", "output": "corr = df_data.corr()\nprint(corr)"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'city' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='duration', data=data_raw)\nplt.title('Boxplot of duration by city')\nplt.show()"}
{"instruction": "Create a pivot table from data_clean with index 'type' and values 'revenue'.", "output": "pivot = data_clean.pivot_table(index='type', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Perform EDA on df: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(df.isnull().sum())\nprint(df.describe())\nfor col in ['score', 'rating', 'age']:\n    plt.hist(df[col].dropna(), bins=10)\n    plt.title(f'Histogram of quantity')\n    plt.show()"}
{"instruction": "Merge df with df2 on 'income' with inner join.", "output": "merged = df.merge(df2, on='income', how='inner')\nprint(merged.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in dataset.", "output": "dataset['count_rolling'] = dataset['count'].rolling(window=5).mean()"}
{"instruction": "Merge df2 with df2 on 'revenue' with inner join.", "output": "merged = df2.merge(df2, on='revenue', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'count' of df.", "output": "unique_count = df['count'].nunique()\nprint(unique_count)"}
{"instruction": "Plot value counts of 'region' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Drop rows where 'sales' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['sales'])"}
{"instruction": "Convert 'sales' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['sales'] = pd.to_datetime(data_clean['sales'])"}
{"instruction": "Extract year and month from 'timestamp' in dataset, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['timestamp']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Rename column 'weight' in data_raw to 'new_weight'.", "output": "data_raw = data_raw.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Perform time series resampling: sum 'height' monthly in df.", "output": "import pandas as pd\ndf['date'] = pd.to_datetime(df['date'])\nresampled = df.set_index('date').resample('M')['height'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'rating' is null in df1.", "output": "df1 = df1.dropna(subset=['rating'])"}
{"instruction": "Convert categorical column 'class' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['class'])\nprint(df1_ohe.head())"}
{"instruction": "Convert categorical column 'type' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['type'])\nprint(data_ohe.head())"}
{"instruction": "Convert categorical column 'city' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['city'])\nprint(df_ohe.head())"}
{"instruction": "Rename column 'price' in sales_df to 'new_price'.", "output": "sales_df = sales_df.rename(columns={'price': 'new_price'})"}
{"instruction": "Filter sales_df for rows where 'weight' > 100.", "output": "sales_df_filtered = sales_df[sales_df['weight'] > 100]"}
{"instruction": "Plot value counts of 'class' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Plot value counts of 'region' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Find the top 3 rows in df1 with highest 'income'.", "output": "top3 = df1.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Rename column 'speed' in dataset to 'new_speed'.", "output": "dataset = dataset.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Filter df_data for rows where 'price' > 100.", "output": "df_data_filtered = df_data[df_data['price'] > 100]"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'class' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='sales', data=df_sales)\nplt.title('Boxplot of sales by class')\nplt.show()"}
{"instruction": "Sort df1 by 'weight' descending.", "output": "df1 = df1.sort_values(by='weight', ascending=False)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'score'.", "output": "top3 = data_raw.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Find the top 3 rows in data with highest 'value'.", "output": "top3 = data.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Convert 'quantity' in data to datetime format.", "output": "import pandas as pd\ndata['quantity'] = pd.to_datetime(data['quantity'])"}
{"instruction": "Convert 'duration' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['duration'] = pd.to_datetime(data_raw['duration'])"}
{"instruction": "Filter df for rows where 'revenue' > 100.", "output": "df_filtered = df[df['revenue'] > 100]"}
{"instruction": "Group df2 by 'group' and calculate mean of 'duration'.", "output": "grouped = df2.groupby('group')['duration'].mean()\nprint(grouped)"}
{"instruction": "Sort df by 'value' descending.", "output": "df = df.sort_values(by='value', ascending=False)"}
{"instruction": "Plot value counts of 'department' in data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Merge df with df2 on 'quantity' with inner join.", "output": "merged = df.merge(df2, on='quantity', how='inner')\nprint(merged.head())"}
{"instruction": "Perform EDA on df2: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(df2.isnull().sum())\nprint(df2.describe())\nfor col in ['salary', 'income', 'duration']:\n    plt.hist(df2[col].dropna(), bins=10)\n    plt.title(f'Histogram of score')\n    plt.show()"}
{"instruction": "Rename column 'count' in df_data to 'new_count'.", "output": "df_data = df_data.rename(columns={'count': 'new_count'})"}
{"instruction": "Merge data_raw with df2 on 'weight' with inner join.", "output": "merged = data_raw.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in df1 with highest 'value'.", "output": "top3 = df1.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Convert 'duration' in df2 to datetime format.", "output": "import pandas as pd\ndf2['duration'] = pd.to_datetime(df2['duration'])"}
{"instruction": "Filter data for rows where 'age' contains 'A'.", "output": "data_sub = data[data['age'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Group df by 'type' and calculate mean of 'duration'.", "output": "grouped = df.groupby('type')['duration'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'value' monthly in df.", "output": "import pandas as pd\ndf['date'] = pd.to_datetime(df['date'])\nresampled = df.set_index('date').resample('M')['value'].sum()\nprint(resampled)"}
{"instruction": "Filter data for rows where 'weight' contains 'A'.", "output": "data_sub = data[data['weight'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Generate descriptive statistics for numeric columns in data_raw.", "output": "print(data_raw.describe())"}
{"instruction": "Extract year and month from 'timestamp' in data_clean, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['timestamp']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Drop rows where 'price' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['price'])"}
{"instruction": "Merge df with df2 on 'score' with inner join.", "output": "merged = df.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Plot value counts of 'department' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Convert 'score' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['score'] = pd.to_datetime(data_clean['score'])"}
{"instruction": "Filter df_sales for rows where 'income' > 100.", "output": "df_sales_filtered = df_sales[df_sales['income'] > 100]"}
{"instruction": "Plot value counts of 'type' in data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'age' monthly in dataset.", "output": "import pandas as pd\ndataset['order_date'] = pd.to_datetime(dataset['order_date'])\nresampled = dataset.set_index('order_date').resample('M')['age'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'weight' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['weight'])"}
{"instruction": "Plot a boxplot of 'count' grouped by 'group' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='count', data=data_clean)\nplt.title('Boxplot of count by group')\nplt.show()"}
{"instruction": "Generate descriptive statistics for numeric columns in dataset.", "output": "print(dataset.describe())"}
{"instruction": "Sort sales_df by 'duration' descending.", "output": "sales_df = sales_df.sort_values(by='duration', ascending=False)"}
{"instruction": "Rename column 'age' in df2 to 'new_age'.", "output": "df2 = df2.rename(columns={'age': 'new_age'})"}
{"instruction": "Drop rows where 'height' is null in data.", "output": "data = data.dropna(subset=['height'])"}
{"instruction": "Count unique values in 'weight' of df1.", "output": "unique_count = df1['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Plot value counts of 'department' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Group df_data by 'class' and calculate mean of 'sales'.", "output": "grouped = df_data.groupby('class')['sales'].mean()\nprint(grouped)"}
{"instruction": "Filter df for rows where 'quantity' > 100.", "output": "df_filtered = df[df['quantity'] > 100]"}
{"instruction": "Generate descriptive statistics for numeric columns in df_sales.", "output": "print(df_sales.describe())"}
{"instruction": "Drop rows where 'speed' is null in df.", "output": "df = df.dropna(subset=['speed'])"}
{"instruction": "Sort df1 by 'income' descending.", "output": "df1 = df1.sort_values(by='income', ascending=False)"}
{"instruction": "Calculate the correlation matrix of sales_df.", "output": "corr = sales_df.corr()\nprint(corr)"}
{"instruction": "Count unique values in 'height' of data.", "output": "unique_count = data['height'].nunique()\nprint(unique_count)"}
{"instruction": "Merge data_raw with df2 on 'price' with inner join.", "output": "merged = data_raw.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Concatenate df1 and df2 into sales_df and reset index.", "output": "sales_df = pd.concat([df1, df2], ignore_index=True)\nprint(sales_df.shape)"}
{"instruction": "Fill missing values in 'speed' of data_clean with the median.", "output": "data_clean['speed'] = data_clean['speed'].fillna(data_clean['speed'].median())"}
{"instruction": "Find the top 3 rows in data_raw with highest 'revenue'.", "output": "top3 = data_raw.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Count missing values per column in df2.", "output": "missing = df2.isnull().sum()\nprint(missing)"}
{"instruction": "Filter df1 for rows where 'age' > 100.", "output": "df1_filtered = df1[df1['age'] > 100]"}
{"instruction": "Plot a boxplot of 'age' grouped by 'class' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='age', data=sales_df)\nplt.title('Boxplot of age by class')\nplt.show()"}
{"instruction": "Rename column 'age' in df_sales to 'new_age'.", "output": "df_sales = df_sales.rename(columns={'age': 'new_age'})"}
{"instruction": "Filter df_data for rows where 'revenue' contains 'A'.", "output": "df_data_sub = df_data[df_data['revenue'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in data_raw.", "output": "data_raw['sales_rolling'] = data_raw['sales'].rolling(window=5).mean()"}
{"instruction": "Convert 'score' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['score'] = pd.to_datetime(sales_df['score'])"}
{"instruction": "Fill missing values in 'speed' of sales_df with the median.", "output": "sales_df['speed'] = sales_df['speed'].fillna(sales_df['speed'].median())"}
{"instruction": "Rename column 'score' in data_raw to 'new_score'.", "output": "data_raw = data_raw.rename(columns={'score': 'new_score'})"}
{"instruction": "Filter dataset for rows where 'salary' > 100.", "output": "dataset_filtered = dataset[dataset['salary'] > 100]"}
{"instruction": "Fill missing values in 'price' of df with the median.", "output": "df['price'] = df['price'].fillna(df['price'].median())"}
{"instruction": "Find the top 3 rows in df2 with highest 'sales'.", "output": "top3 = df2.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Plot a boxplot of 'count' grouped by 'status' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='count', data=data_clean)\nplt.title('Boxplot of count by status')\nplt.show()"}
{"instruction": "Drop rows where 'value' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['value'])"}
{"instruction": "Filter df for rows where 'value' contains 'A'.", "output": "df_sub = df[df['value'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Create a seaborn pairplot of numeric columns in df.", "output": "import seaborn as sns\nsns.pairplot(df[['age', 'revenue', 'count']].dropna())\nplt.show()"}
{"instruction": "Plot value counts of 'department' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Fill missing values in 'duration' of data with the median.", "output": "data['duration'] = data['duration'].fillna(data['duration'].median())"}
{"instruction": "Convert categorical column 'class' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['class'])\nprint(data_raw_ohe.head())"}
{"instruction": "Rename column 'score' in df_data to 'new_score'.", "output": "df_data = df_data.rename(columns={'score': 'new_score'})"}
{"instruction": "Group df_data by 'type' and calculate mean of 'sales'.", "output": "grouped = df_data.groupby('type')['sales'].mean()\nprint(grouped)"}
{"instruction": "Convert 'height' in df2 to datetime format.", "output": "import pandas as pd\ndf2['height'] = pd.to_datetime(df2['height'])"}
{"instruction": "Convert 'duration' in data to datetime format.", "output": "import pandas as pd\ndata['duration'] = pd.to_datetime(data['duration'])"}
{"instruction": "Sort data by 'duration' descending.", "output": "data = data.sort_values(by='duration', ascending=False)"}
{"instruction": "Merge df with df2 on 'revenue' with inner join.", "output": "merged = df.merge(df2, on='revenue', how='inner')\nprint(merged.head())"}
{"instruction": "Extract year and month from 'date' in df2, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Rename column 'speed' in data to 'new_speed'.", "output": "data = data.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Find the top 3 rows in sales_df with highest 'income'.", "output": "top3 = sales_df.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Sort df2 by 'salary' descending.", "output": "df2 = df2.sort_values(by='salary', ascending=False)"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'status' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='salary', data=data_raw)\nplt.title('Boxplot of salary by status')\nplt.show()"}
{"instruction": "Sort df2 by 'score' descending.", "output": "df2 = df2.sort_values(by='score', ascending=False)"}
{"instruction": "Plot value counts of 'type' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Create a pivot table from data with index 'city' and values 'weight'.", "output": "pivot = data.pivot_table(index='city', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in df_sales.", "output": "df_sales['revenue_rolling'] = df_sales['revenue'].rolling(window=5).mean()"}
{"instruction": "Sort df2 by 'age' descending.", "output": "df2 = df2.sort_values(by='age', ascending=False)"}
{"instruction": "Count unique values in 'rating' of sales_df.", "output": "unique_count = sales_df['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'sales' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['sales'])"}
{"instruction": "Fill missing values in 'speed' of df2 with the median.", "output": "df2['speed'] = df2['speed'].fillna(df2['speed'].median())"}
{"instruction": "Create a pivot table from data_raw with index 'city' and values 'income'.", "output": "pivot = data_raw.pivot_table(index='city', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Drop rows where 'count' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['count'])"}
{"instruction": "Convert categorical column 'department' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['department'])\nprint(data_raw_ohe.head())"}
{"instruction": "Filter data_raw for rows where 'rating' > 100.", "output": "data_raw_filtered = data_raw[data_raw['rating'] > 100]"}
{"instruction": "Filter data_clean for rows where 'speed' > 100.", "output": "data_clean_filtered = data_clean[data_clean['speed'] > 100]"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['timestamp'] = pd.to_datetime(data_clean['timestamp'])\nresampled = data_clean.set_index('timestamp').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Convert categorical column 'city' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['city'])\nprint(df_data_ohe.head())"}
{"instruction": "Sort df1 by 'rating' descending.", "output": "df1 = df1.sort_values(by='rating', ascending=False)"}
{"instruction": "Filter sales_df for rows where 'height' > 100.", "output": "sales_df_filtered = sales_df[sales_df['height'] > 100]"}
{"instruction": "Plot a boxplot of 'count' grouped by 'region' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='count', data=df2)\nplt.title('Boxplot of count by region')\nplt.show()"}
{"instruction": "Plot a boxplot of 'count' grouped by 'department' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='count', data=dataset)\nplt.title('Boxplot of count by department')\nplt.show()"}
{"instruction": "Filter data for rows where 'weight' > 100.", "output": "data_filtered = data[data['weight'] > 100]"}
{"instruction": "Rename column 'score' in df_sales to 'new_score'.", "output": "df_sales = df_sales.rename(columns={'score': 'new_score'})"}
{"instruction": "Drop rows where 'weight' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['weight'])"}
{"instruction": "Plot value counts of 'status' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Plot value counts of 'type' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'quantity' in df1.", "output": "df1['quantity_rolling'] = df1['quantity'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['sale_date'] = pd.to_datetime(df_sales['sale_date'])\nresampled = df_sales.set_index('sale_date').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Filter df1 for rows where 'sales' > 100.", "output": "df1_filtered = df1[df1['sales'] > 100]"}
{"instruction": "Create a seaborn pairplot of numeric columns in df2.", "output": "import seaborn as sns\nsns.pairplot(df2[['duration', 'age', 'salary']].dropna())\nplt.show()"}
{"instruction": "Convert 'count' in data to datetime format.", "output": "import pandas as pd\ndata['count'] = pd.to_datetime(data['count'])"}
{"instruction": "Visualize correlation heatmap for numeric columns in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = data_clean[['sales', 'weight', 'revenue']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Rename column 'weight' in data to 'new_weight'.", "output": "data = data.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Group df_data by 'status' and calculate mean of 'quantity'.", "output": "grouped = df_data.groupby('status')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'age' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['age'])"}
{"instruction": "Count unique values in 'value' of sales_df.", "output": "unique_count = sales_df['value'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'salary' of df_sales.", "output": "unique_count = df_sales['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Group dataset by 'department' and calculate mean of 'height'.", "output": "grouped = dataset.groupby('department')['height'].mean()\nprint(grouped)"}
{"instruction": "Filter data_raw for rows where 'price' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['price'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Extract year and month from 'timestamp' in data, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['timestamp']).dt.to_period('M')\nmonthly = data.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Rename column 'duration' in df1 to 'new_duration'.", "output": "df1 = df1.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Count unique values in 'sales' of sales_df.", "output": "unique_count = sales_df['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in data.", "output": "import pandas as pd\ndata['date'] = pd.to_datetime(data['date'])\nresampled = data.set_index('date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Filter df for rows where 'income' > 100.", "output": "df_filtered = df[df['income'] > 100]"}
{"instruction": "Sort dataset by 'salary' descending.", "output": "dataset = dataset.sort_values(by='salary', ascending=False)"}
{"instruction": "Count unique values in 'weight' of dataset.", "output": "unique_count = dataset['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'rating' in df2 to 'new_rating'.", "output": "df2 = df2.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Rename column 'weight' in data_clean to 'new_weight'.", "output": "data_clean = data_clean.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Find the top 3 rows in data_clean with highest 'revenue'.", "output": "top3 = data_clean.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Plot value counts of 'city' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Create a pivot table from df_sales with index 'region' and values 'weight'.", "output": "pivot = df_sales.pivot_table(index='region', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_raw for rows where 'score' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['score'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Plot value counts of 'class' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Convert 'revenue' in df1 to datetime format.", "output": "import pandas as pd\ndf1['revenue'] = pd.to_datetime(df1['revenue'])"}
{"instruction": "Count missing values per column in data_raw.", "output": "missing = data_raw.isnull().sum()\nprint(missing)"}
{"instruction": "Plot value counts of 'class' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df2, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['timestamp']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Fill missing values in 'salary' of df_data with the median.", "output": "df_data['salary'] = df_data['salary'].fillna(df_data['salary'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'quantity' in sales_df.", "output": "sales_df['quantity_rolling'] = sales_df['quantity'].rolling(window=5).mean()"}
{"instruction": "Drop rows where 'duration' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['duration'])"}
{"instruction": "Extract year and month from 'sale_date' in sales_df, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['sale_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Filter data for rows where 'salary' > 100.", "output": "data_filtered = data[data['salary'] > 100]"}
{"instruction": "Convert categorical column 'class' in df_sales to one-hot encoding.", "output": "df_sales_ohe = pd.get_dummies(df_sales, columns=['class'])\nprint(df_sales_ohe.head())"}
{"instruction": "Drop rows where 'salary' is null in dataset.", "output": "dataset = dataset.dropna(subset=['salary'])"}
{"instruction": "Filter data for rows where 'count' > 100.", "output": "data_filtered = data[data['count'] > 100]"}
{"instruction": "Sort data by 'income' descending.", "output": "data = data.sort_values(by='income', ascending=False)"}
{"instruction": "Extract year and month from 'date' in dataset, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Find the top 3 rows in dataset with highest 'salary'.", "output": "top3 = dataset.nlargest(3, 'salary')\nprint(top3)"}
{"instruction": "Sort sales_df by 'salary' descending.", "output": "sales_df = sales_df.sort_values(by='salary', ascending=False)"}
{"instruction": "Generate descriptive statistics for numeric columns in df_data.", "output": "print(df_data.describe())"}
{"instruction": "Drop rows where 'speed' is null in df_data.", "output": "df_data = df_data.dropna(subset=['speed'])"}
{"instruction": "Convert categorical column 'city' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['city'])\nprint(data_clean_ohe.head())"}
{"instruction": "Show the first 5 rows of df_data.", "output": "print(df_data.head())"}
{"instruction": "Rename column 'count' in df_sales to 'new_count'.", "output": "df_sales = df_sales.rename(columns={'count': 'new_count'})"}
{"instruction": "Perform time series resampling: sum 'salary' monthly in sales_df.", "output": "import pandas as pd\nsales_df['timestamp'] = pd.to_datetime(sales_df['timestamp'])\nresampled = sales_df.set_index('timestamp').resample('M')['salary'].sum()\nprint(resampled)"}
{"instruction": "Calculate the correlation matrix of dataset.", "output": "corr = dataset.corr()\nprint(corr)"}
{"instruction": "Convert categorical column 'region' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['region'])\nprint(df1_ohe.head())"}
{"instruction": "Rename column 'count' in df1 to 'new_count'.", "output": "df1 = df1.rename(columns={'count': 'new_count'})"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in data.", "output": "import pandas as pd\ndata['date'] = pd.to_datetime(data['date'])\nresampled = data.set_index('date').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in df_data.", "output": "df_data['score_rolling'] = df_data['score'].rolling(window=5).mean()"}
{"instruction": "Sort df by 'score' descending.", "output": "df = df.sort_values(by='score', ascending=False)"}
{"instruction": "Fill missing values in 'value' of data_raw with the median.", "output": "data_raw['value'] = data_raw['value'].fillna(data_raw['value'].median())"}
{"instruction": "Drop rows where 'salary' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['salary'])"}
{"instruction": "Convert categorical column 'group' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['group'])\nprint(data_clean_ohe.head())"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'category' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='quantity', data=df_sales)\nplt.title('Boxplot of quantity by category')\nplt.show()"}
{"instruction": "Filter df1 for rows where 'score' contains 'A'.", "output": "df1_sub = df1[df1['score'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Drop rows where 'price' is null in dataset.", "output": "dataset = dataset.dropna(subset=['price'])"}
{"instruction": "Compute a rolling average of window size 5 on 'height' in df2.", "output": "df2['height_rolling'] = df2['height'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'income' of df_data with the median.", "output": "df_data['income'] = df_data['income'].fillna(df_data['income'].median())"}
{"instruction": "Fill missing values in 'duration' of df1 with the median.", "output": "df1['duration'] = df1['duration'].fillna(df1['duration'].median())"}
{"instruction": "Merge df2 with df2 on 'speed' with inner join.", "output": "merged = df2.merge(df2, on='speed', how='inner')\nprint(merged.head())"}
{"instruction": "Plot value counts of 'department' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df2, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['timestamp']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Fill missing values in 'value' of df_sales with the median.", "output": "df_sales['value'] = df_sales['value'].fillna(df_sales['value'].median())"}
{"instruction": "Extract year and month from 'date' in df2, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Visualize correlation heatmap for numeric columns in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = sales_df[['salary', 'height', 'count']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Plot value counts of 'group' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Sort df_data by 'duration' descending.", "output": "df_data = df_data.sort_values(by='duration', ascending=False)"}
{"instruction": "Rename column 'age' in df1 to 'new_age'.", "output": "df1 = df1.rename(columns={'age': 'new_age'})"}
{"instruction": "Drop rows where 'age' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['age'])"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in df.", "output": "import pandas as pd\ndf['sale_date'] = pd.to_datetime(df['sale_date'])\nresampled = df.set_index('sale_date').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'count' grouped by 'status' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='count', data=data_raw)\nplt.title('Boxplot of count by status')\nplt.show()"}
{"instruction": "Sort df by 'duration' descending.", "output": "df = df.sort_values(by='duration', ascending=False)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'department' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='height', data=df_data)\nplt.title('Boxplot of height by department')\nplt.show()"}
{"instruction": "Rename column 'price' in df_data to 'new_price'.", "output": "df_data = df_data.rename(columns={'price': 'new_price'})"}
{"instruction": "Filter dataset for rows where 'sales' contains 'A'.", "output": "dataset_sub = dataset[dataset['sales'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Convert 'quantity' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['quantity'] = pd.to_datetime(sales_df['quantity'])"}
{"instruction": "Rename column 'quantity' in df1 to 'new_quantity'.", "output": "df1 = df1.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Drop rows where 'weight' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['weight'])"}
{"instruction": "Rename column 'sales' in df_sales to 'new_sales'.", "output": "df_sales = df_sales.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Create a pivot table from data_clean with index 'category' and values 'count'.", "output": "pivot = data_clean.pivot_table(index='category', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df with index 'class' and values 'speed'.", "output": "pivot = df.pivot_table(index='class', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert 'duration' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['duration'] = pd.to_datetime(df_sales['duration'])"}
{"instruction": "Plot a boxplot of 'price' grouped by 'status' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='price', data=dataset)\nplt.title('Boxplot of price by status')\nplt.show()"}
{"instruction": "Rename column 'income' in df_sales to 'new_income'.", "output": "df_sales = df_sales.rename(columns={'income': 'new_income'})"}
{"instruction": "Extract year and month from 'order_date' in df1, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['order_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Drop rows where 'sales' is null in data.", "output": "data = data.dropna(subset=['sales'])"}
{"instruction": "Create a pivot table from dataset with index 'department' and values 'sales'.", "output": "pivot = dataset.pivot_table(index='department', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group df_sales by 'category' and calculate mean of 'speed'.", "output": "grouped = df_sales.groupby('category')['speed'].mean()\nprint(grouped)"}
{"instruction": "Convert 'rating' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['rating'] = pd.to_datetime(sales_df['rating'])"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in data_clean.", "output": "data_clean['rating_rolling'] = data_clean['rating'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df2 with highest 'income'.", "output": "top3 = df2.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Visualize correlation heatmap for numeric columns in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = data[['score', 'count', 'income']].corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')\nplt.show()"}
{"instruction": "Rename column 'quantity' in dataset to 'new_quantity'.", "output": "dataset = dataset.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Group df1 by 'status' and calculate mean of 'score'.", "output": "grouped = df1.groupby('status')['score'].mean()\nprint(grouped)"}
{"instruction": "Convert categorical column 'type' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['type'])\nprint(df_data_ohe.head())"}
{"instruction": "Extract year and month from 'date' in df_sales, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Fill missing values in 'income' of data with the median.", "output": "data['income'] = data['income'].fillna(data['income'].median())"}
{"instruction": "Extract year and month from 'sale_date' in sales_df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['sale_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Rename column 'income' in df_data to 'new_income'.", "output": "df_data = df_data.rename(columns={'income': 'new_income'})"}
{"instruction": "Convert 'salary' in df to datetime format.", "output": "import pandas as pd\ndf['salary'] = pd.to_datetime(df['salary'])"}
{"instruction": "Filter df1 for rows where 'height' > 100.", "output": "df1_filtered = df1[df1['height'] > 100]"}
{"instruction": "Plot value counts of 'region' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Count unique values in 'score' of df_sales.", "output": "unique_count = df_sales['score'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df1 for rows where 'score' > 100.", "output": "df1_filtered = df1[df1['score'] > 100]"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'city' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='salary', data=data_raw)\nplt.title('Boxplot of salary by city')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'rating' > 100.", "output": "df2_filtered = df2[df2['rating'] > 100]"}
{"instruction": "Rename column 'sales' in df1 to 'new_sales'.", "output": "df1 = df1.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Drop rows where 'revenue' is null in df_data.", "output": "df_data = df_data.dropna(subset=['revenue'])"}
{"instruction": "Count unique values in 'count' of sales_df.", "output": "unique_count = sales_df['count'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'score' of dataset.", "output": "unique_count = dataset['score'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'quantity' in df_data to 'new_quantity'.", "output": "df_data = df_data.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Filter data_clean for rows where 'price' > 100.", "output": "data_clean_filtered = data_clean[data_clean['price'] > 100]"}
{"instruction": "Count unique values in 'height' of df2.", "output": "unique_count = df2['height'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df for rows where 'sales' contains 'A'.", "output": "df_sub = df[df['sales'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Create a pivot table from sales_df with index 'city' and values 'score'.", "output": "pivot = sales_df.pivot_table(index='city', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'quantity' in data.", "output": "data['quantity_rolling'] = data['quantity'].rolling(window=5).mean()"}
{"instruction": "Rename column 'count' in df2 to 'new_count'.", "output": "df2 = df2.rename(columns={'count': 'new_count'})"}
{"instruction": "Rename column 'value' in df_sales to 'new_value'.", "output": "df_sales = df_sales.rename(columns={'value': 'new_value'})"}
{"instruction": "Perform time series resampling: sum 'value' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['date'] = pd.to_datetime(data_raw['date'])\nresampled = data_raw.set_index('date').resample('M')['value'].sum()\nprint(resampled)"}
{"instruction": "Group df_data by 'group' and calculate mean of 'count'.", "output": "grouped = df_data.groupby('group')['count'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in df_data.", "output": "import pandas as pd\ndf_data['date'] = pd.to_datetime(df_data['date'])\nresampled = df_data.set_index('date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Create a pivot table from df with index 'category' and values 'count'.", "output": "pivot = df.pivot_table(index='category', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group dataset by 'class' and calculate mean of 'salary'.", "output": "grouped = dataset.groupby('class')['salary'].mean()\nprint(grouped)"}
{"instruction": "Sort df_sales by 'height' descending.", "output": "df_sales = df_sales.sort_values(by='height', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'income' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['sale_date'] = pd.to_datetime(df_sales['sale_date'])\nresampled = df_sales.set_index('sale_date').resample('M')['income'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in df_sales.", "output": "df_sales['sales_rolling'] = df_sales['sales'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'age' of sales_df with the median.", "output": "sales_df['age'] = sales_df['age'].fillna(sales_df['age'].median())"}
{"instruction": "Filter df2 for rows where 'revenue' contains 'A'.", "output": "df2_sub = df2[df2['revenue'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Create a pivot table from data with index 'department' and values 'sales'.", "output": "pivot = data.pivot_table(index='department', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot value counts of 'category' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Group dataset by 'group' and calculate mean of 'revenue'.", "output": "grouped = dataset.groupby('group')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'sale_date' in df, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['sale_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Group df by 'city' and calculate mean of 'rating'.", "output": "grouped = df.groupby('city')['rating'].mean()\nprint(grouped)"}
{"instruction": "Sort df1 by 'value' descending.", "output": "df1 = df1.sort_values(by='value', ascending=False)"}
{"instruction": "Fill missing values in 'duration' of df with the median.", "output": "df['duration'] = df['duration'].fillna(df['duration'].median())"}
{"instruction": "Perform time series resampling: sum 'age' monthly in df2.", "output": "import pandas as pd\ndf2['timestamp'] = pd.to_datetime(df2['timestamp'])\nresampled = df2.set_index('timestamp').resample('M')['age'].sum()\nprint(resampled)"}
{"instruction": "Merge df with df2 on 'salary' with inner join.", "output": "merged = df.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in data_clean with highest 'value'.", "output": "top3 = data_clean.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Sort dataset by 'count' descending.", "output": "dataset = dataset.sort_values(by='count', ascending=False)"}
{"instruction": "Group df_data by 'category' and calculate mean of 'salary'.", "output": "grouped = df_data.groupby('category')['salary'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'rating' in df to 'new_rating'.", "output": "df = df.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Fill missing values in 'salary' of dataset with the median.", "output": "dataset['salary'] = dataset['salary'].fillna(dataset['salary'].median())"}
{"instruction": "Sort data_raw by 'salary' descending.", "output": "data_raw = data_raw.sort_values(by='salary', ascending=False)"}
{"instruction": "Fill missing values in 'speed' of df_sales with the median.", "output": "df_sales['speed'] = df_sales['speed'].fillna(df_sales['speed'].median())"}
{"instruction": "Plot value counts of 'class' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Fill missing values in 'duration' of data_raw with the median.", "output": "data_raw['duration'] = data_raw['duration'].fillna(data_raw['duration'].median())"}
{"instruction": "Drop rows where 'count' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['count'])"}
{"instruction": "Extract year and month from 'order_date' in data_raw, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['order_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'price' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['sale_date'] = pd.to_datetime(data_clean['sale_date'])\nresampled = data_clean.set_index('sale_date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in df_data.", "output": "df_data['value_rolling'] = df_data['value'].rolling(window=5).mean()"}
{"instruction": "Drop rows where 'quantity' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['quantity'])"}
{"instruction": "Rename column 'age' in df_data to 'new_age'.", "output": "df_data = df_data.rename(columns={'age': 'new_age'})"}
{"instruction": "Count unique values in 'price' of df1.", "output": "unique_count = df1['price'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df2 for rows where 'speed' contains 'A'.", "output": "df2_sub = df2[df2['speed'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Filter df2 for rows where 'speed' > 100.", "output": "df2_filtered = df2[df2['speed'] > 100]"}
{"instruction": "Drop rows where 'age' is null in dataset.", "output": "dataset = dataset.dropna(subset=['age'])"}
{"instruction": "Rename column 'price' in data_raw to 'new_price'.", "output": "data_raw = data_raw.rename(columns={'price': 'new_price'})"}
{"instruction": "Sort df2 by 'duration' descending.", "output": "df2 = df2.sort_values(by='duration', ascending=False)"}
{"instruction": "Drop rows where 'height' is null in df_data.", "output": "df_data = df_data.dropna(subset=['height'])"}
{"instruction": "Fill missing values in 'speed' of dataset with the median.", "output": "dataset['speed'] = dataset['speed'].fillna(dataset['speed'].median())"}
{"instruction": "Create a pivot table from df with index 'department' and values 'salary'.", "output": "pivot = df.pivot_table(index='department', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'revenue' of df1 with the median.", "output": "df1['revenue'] = df1['revenue'].fillna(df1['revenue'].median())"}
{"instruction": "Sort data_clean by 'salary' descending.", "output": "data_clean = data_clean.sort_values(by='salary', ascending=False)"}
{"instruction": "Merge dataset with df2 on 'age' with inner join.", "output": "merged = dataset.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Fill missing values in 'score' of df with the median.", "output": "df['score'] = df['score'].fillna(df['score'].median())"}
{"instruction": "Group df2 by 'region' and calculate mean of 'income'.", "output": "grouped = df2.groupby('region')['income'].mean()\nprint(grouped)"}
{"instruction": "Find the top 3 rows in df with highest 'quantity'.", "output": "top3 = df.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Drop rows where 'income' is null in data.", "output": "data = data.dropna(subset=['income'])"}
{"instruction": "Convert categorical column 'city' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['city'])\nprint(df1_ohe.head())"}
{"instruction": "Drop rows where 'salary' is null in data.", "output": "data = data.dropna(subset=['salary'])"}
{"instruction": "Fill missing values in 'height' of df_data with the median.", "output": "df_data['height'] = df_data['height'].fillna(df_data['height'].median())"}
{"instruction": "Plot value counts of 'class' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Sort dataset by 'price' descending.", "output": "dataset = dataset.sort_values(by='price', ascending=False)"}
{"instruction": "Convert 'salary' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['salary'] = pd.to_datetime(df_sales['salary'])"}
{"instruction": "Filter data_raw for rows where 'revenue' > 100.", "output": "data_raw_filtered = data_raw[data_raw['revenue'] > 100]"}
{"instruction": "Drop rows where 'height' is null in df1.", "output": "df1 = df1.dropna(subset=['height'])"}
{"instruction": "Find the top 3 rows in data_clean with highest 'count'.", "output": "top3 = data_clean.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Filter df_sales for rows where 'sales' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['sales'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Find the top 3 rows in data_raw with highest 'age'.", "output": "top3 = data_raw.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Convert categorical column 'class' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['class'])\nprint(data_clean_ohe.head())"}
{"instruction": "Filter df_sales for rows where 'rating' > 100.", "output": "df_sales_filtered = df_sales[df_sales['rating'] > 100]"}
{"instruction": "Convert categorical column 'status' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['status'])\nprint(sales_df_ohe.head())"}
{"instruction": "Filter df1 for rows where 'price' > 100.", "output": "df1_filtered = df1[df1['price'] > 100]"}
{"instruction": "Count unique values in 'rating' of data.", "output": "unique_count = data['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Merge sales_df with df2 on 'income' with inner join.", "output": "merged = sales_df.merge(df2, on='income', how='inner')\nprint(merged.head())"}
{"instruction": "Convert categorical column 'region' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['region'])\nprint(data_clean_ohe.head())"}
{"instruction": "Drop rows where 'score' is null in df2.", "output": "df2 = df2.dropna(subset=['score'])"}
{"instruction": "Filter df_data for rows where 'count' contains 'A'.", "output": "df_data_sub = df_data[df_data['count'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Find the top 3 rows in df2 with highest 'age'.", "output": "top3 = df2.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Plot value counts of 'department' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Sort df_data by 'value' descending.", "output": "df_data = df_data.sort_values(by='value', ascending=False)"}
{"instruction": "Extract year and month from 'date' in df, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Drop rows where 'salary' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['salary'])"}
{"instruction": "Find the top 3 rows in data with highest 'rating'.", "output": "top3 = data.nlargest(3, 'rating')\nprint(top3)"}
{"instruction": "Filter df_data for rows where 'income' contains 'A'.", "output": "df_data_sub = df_data[df_data['income'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Sort data_raw by 'duration' descending.", "output": "data_raw = data_raw.sort_values(by='duration', ascending=False)"}
{"instruction": "Drop rows where 'rating' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['rating'])"}
{"instruction": "Merge df_sales with df2 on 'weight' with inner join.", "output": "merged = df_sales.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Filter dataset for rows where 'income' contains 'A'.", "output": "dataset_sub = dataset[dataset['income'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'region' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='duration', data=df_data)\nplt.title('Boxplot of duration by region')\nplt.show()"}
{"instruction": "Merge df1 with df2 on 'weight' with inner join.", "output": "merged = df1.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Merge df with df2 on 'duration' with inner join.", "output": "merged = df.merge(df2, on='duration', how='inner')\nprint(merged.head())"}
{"instruction": "Convert 'rating' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['rating'] = pd.to_datetime(data_raw['rating'])"}
{"instruction": "Sort data_clean by 'rating' descending.", "output": "data_clean = data_clean.sort_values(by='rating', ascending=False)"}
{"instruction": "Filter df_sales for rows where 'revenue' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['revenue'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Extract year and month from 'timestamp' in data_clean, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['timestamp']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in df.", "output": "import pandas as pd\ndf['sale_date'] = pd.to_datetime(df['sale_date'])\nresampled = df.set_index('sale_date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'price' monthly in df1.", "output": "import pandas as pd\ndf1['date'] = pd.to_datetime(df1['date'])\nresampled = df1.set_index('date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Convert 'age' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['age'] = pd.to_datetime(sales_df['age'])"}
{"instruction": "Perform time series resampling: sum 'price' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['sale_date'] = pd.to_datetime(data_raw['sale_date'])\nresampled = data_raw.set_index('sale_date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Group dataset by 'class' and calculate mean of 'sales'.", "output": "grouped = dataset.groupby('class')['sales'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'quantity' in df_sales to 'new_quantity'.", "output": "df_sales = df_sales.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Fill missing values in 'score' of dataset with the median.", "output": "dataset['score'] = dataset['score'].fillna(dataset['score'].median())"}
{"instruction": "Extract year and month from 'date' in df_data, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Sort data by 'score' descending.", "output": "data = data.sort_values(by='score', ascending=False)"}
{"instruction": "Create a pivot table from sales_df with index 'class' and values 'count'.", "output": "pivot = sales_df.pivot_table(index='class', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group df2 by 'status' and calculate mean of 'sales'.", "output": "grouped = df2.groupby('status')['sales'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'price' in df to 'new_price'.", "output": "df = df.rename(columns={'price': 'new_price'})"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in data_raw.", "output": "data_raw['value_rolling'] = data_raw['value'].rolling(window=5).mean()"}
{"instruction": "Rename column 'revenue' in df1 to 'new_revenue'.", "output": "df1 = df1.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Create a pivot table from df with index 'city' and values 'age'.", "output": "pivot = df.pivot_table(index='city', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df1 for rows where 'count' > 100.", "output": "df1_filtered = df1[df1['count'] > 100]"}
{"instruction": "Sort df by 'weight' descending.", "output": "df = df.sort_values(by='weight', ascending=False)"}
{"instruction": "Merge dataset with df2 on 'height' with inner join.", "output": "merged = dataset.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in data_clean.", "output": "data_clean['score_rolling'] = data_clean['score'].rolling(window=5).mean()"}
{"instruction": "Filter df for rows where 'rating' contains 'A'.", "output": "df_sub = df[df['rating'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Filter data for rows where 'price' > 100.", "output": "data_filtered = data[data['price'] > 100]"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in df_sales.", "output": "df_sales['speed_rolling'] = df_sales['speed'].rolling(window=5).mean()"}
{"instruction": "Sort df2 by 'sales' descending.", "output": "df2 = df2.sort_values(by='sales', ascending=False)"}
{"instruction": "Convert 'height' in df1 to datetime format.", "output": "import pandas as pd\ndf1['height'] = pd.to_datetime(df1['height'])"}
{"instruction": "Plot value counts of 'city' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Plot value counts of 'class' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Calculate the correlation matrix of df1.", "output": "corr = df1.corr()\nprint(corr)"}
{"instruction": "Perform time series resampling: sum 'score' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['order_date'] = pd.to_datetime(data_raw['order_date'])\nresampled = data_raw.set_index('order_date').resample('M')['score'].sum()\nprint(resampled)"}
{"instruction": "Sort df_sales by 'income' descending.", "output": "df_sales = df_sales.sort_values(by='income', ascending=False)"}
{"instruction": "Filter df2 for rows where 'sales' > 100.", "output": "df2_filtered = df2[df2['sales'] > 100]"}
{"instruction": "Filter data_raw for rows where 'weight' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['weight'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Extract year and month from 'timestamp' in df_data, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['timestamp']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Filter dataset for rows where 'speed' contains 'A'.", "output": "dataset_sub = dataset[dataset['speed'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Rename column 'revenue' in data to 'new_revenue'.", "output": "data = data.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Rename column 'height' in data_clean to 'new_height'.", "output": "data_clean = data_clean.rename(columns={'height': 'new_height'})"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'type' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='salary', data=df1)\nplt.title('Boxplot of salary by type')\nplt.show()"}
{"instruction": "Plot a boxplot of 'score' grouped by 'city' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='score', data=df2)\nplt.title('Boxplot of score by city')\nplt.show()"}
{"instruction": "Fill missing values in 'rating' of sales_df with the median.", "output": "sales_df['rating'] = sales_df['rating'].fillna(sales_df['rating'].median())"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'class' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='quantity', data=df1)\nplt.title('Boxplot of quantity by class')\nplt.show()"}
{"instruction": "Fill missing values in 'revenue' of df with the median.", "output": "df['revenue'] = df['revenue'].fillna(df['revenue'].median())"}
{"instruction": "Filter df2 for rows where 'salary' > 100.", "output": "df2_filtered = df2[df2['salary'] > 100]"}
{"instruction": "Convert 'quantity' in df1 to datetime format.", "output": "import pandas as pd\ndf1['quantity'] = pd.to_datetime(df1['quantity'])"}
{"instruction": "Convert 'sales' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['sales'] = pd.to_datetime(sales_df['sales'])"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['order_date'] = pd.to_datetime(data_raw['order_date'])\nresampled = data_raw.set_index('order_date').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Sort sales_df by 'age' descending.", "output": "sales_df = sales_df.sort_values(by='age', ascending=False)"}
{"instruction": "Convert categorical column 'category' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['category'])\nprint(dataset_ohe.head())"}
{"instruction": "Filter data for rows where 'income' contains 'A'.", "output": "data_sub = data[data['income'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Rename column 'income' in data_clean to 'new_income'.", "output": "data_clean = data_clean.rename(columns={'income': 'new_income'})"}
{"instruction": "Group df2 by 'city' and calculate mean of 'quantity'.", "output": "grouped = df2.groupby('city')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Convert 'income' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['income'] = pd.to_datetime(data_clean['income'])"}
{"instruction": "Filter df1 for rows where 'speed' contains 'A'.", "output": "df1_sub = df1[df1['speed'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Convert categorical column 'category' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['category'])\nprint(data_ohe.head())"}
{"instruction": "Group data by 'department' and calculate mean of 'sales'.", "output": "grouped = data.groupby('department')['sales'].mean()\nprint(grouped)"}
{"instruction": "Count unique values in 'count' of dataset.", "output": "unique_count = dataset['count'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'income' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['income'] = pd.to_datetime(df_data['income'])"}
{"instruction": "Fill missing values in 'price' of data_clean with the median.", "output": "data_clean['price'] = data_clean['price'].fillna(data_clean['price'].median())"}
{"instruction": "Drop rows where 'salary' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['salary'])"}
{"instruction": "Plot a boxplot of 'score' grouped by 'department' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='score', data=df)\nplt.title('Boxplot of score by department')\nplt.show()"}
{"instruction": "Find the top 3 rows in sales_df with highest 'salary'.", "output": "top3 = sales_df.nlargest(3, 'salary')\nprint(top3)"}
{"instruction": "Convert categorical column 'type' in df_sales to one-hot encoding.", "output": "df_sales_ohe = pd.get_dummies(df_sales, columns=['type'])\nprint(df_sales_ohe.head())"}
{"instruction": "Fill missing values in 'score' of data_raw with the median.", "output": "data_raw['score'] = data_raw['score'].fillna(data_raw['score'].median())"}
{"instruction": "Fill missing values in 'sales' of df1 with the median.", "output": "df1['sales'] = df1['sales'].fillna(df1['sales'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in df_data.", "output": "df_data['duration_rolling'] = df_data['duration'].rolling(window=5).mean()"}
{"instruction": "Group df by 'category' and calculate mean of 'score'.", "output": "grouped = df.groupby('category')['score'].mean()\nprint(grouped)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'price'.", "output": "top3 = data_raw.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Count unique values in 'sales' of df1.", "output": "unique_count = df1['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Convert 'rating' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['rating'] = pd.to_datetime(df_sales['rating'])"}
{"instruction": "Filter df1 for rows where 'height' contains 'A'.", "output": "df1_sub = df1[df1['height'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Filter df1 for rows where 'price' contains 'A'.", "output": "df1_sub = df1[df1['price'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Plot value counts of 'category' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in df.", "output": "df['duration_rolling'] = df['duration'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'timestamp' in data_clean, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['timestamp']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Drop rows where 'salary' is null in df2.", "output": "df2 = df2.dropna(subset=['salary'])"}
{"instruction": "Rename column 'revenue' in df_data to 'new_revenue'.", "output": "df_data = df_data.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Convert 'height' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['height'] = pd.to_datetime(sales_df['height'])"}
{"instruction": "Create a pivot table from data with index 'department' and values 'duration'.", "output": "pivot = data.pivot_table(index='department', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert 'height' in data to datetime format.", "output": "import pandas as pd\ndata['height'] = pd.to_datetime(data['height'])"}
{"instruction": "Convert categorical column 'class' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['class'])\nprint(data_ohe.head())"}
{"instruction": "Convert 'revenue' in dataset to datetime format.", "output": "import pandas as pd\ndataset['revenue'] = pd.to_datetime(dataset['revenue'])"}
{"instruction": "Group df_sales by 'category' and calculate mean of 'price'.", "output": "grouped = df_sales.groupby('category')['price'].mean()\nprint(grouped)"}
{"instruction": "Convert 'score' in df1 to datetime format.", "output": "import pandas as pd\ndf1['score'] = pd.to_datetime(df1['score'])"}
{"instruction": "Count unique values in 'income' of df_sales.", "output": "unique_count = df_sales['income'].nunique()\nprint(unique_count)"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in df1.", "output": "import pandas as pd\ndf1['date'] = pd.to_datetime(df1['date'])\nresampled = df1.set_index('date').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Group sales_df by 'type' and calculate mean of 'income'.", "output": "grouped = sales_df.groupby('type')['income'].mean()\nprint(grouped)"}
{"instruction": "Convert 'quantity' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['quantity'] = pd.to_datetime(df_data['quantity'])"}
{"instruction": "Count unique values in 'count' of data_raw.", "output": "unique_count = data_raw['count'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df1 for rows where 'duration' > 100.", "output": "df1_filtered = df1[df1['duration'] > 100]"}
{"instruction": "Fill missing values in 'count' of dataset with the median.", "output": "dataset['count'] = dataset['count'].fillna(dataset['count'].median())"}
{"instruction": "Drop rows where 'duration' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['duration'])"}
{"instruction": "Extract year and month from 'timestamp' in df1, then plot monthly average 'duration'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['timestamp']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['duration'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average duration')\nplt.show()"}
{"instruction": "Group df_data by 'city' and calculate mean of 'salary'.", "output": "grouped = df_data.groupby('city')['salary'].mean()\nprint(grouped)"}
{"instruction": "Group data by 'region' and calculate mean of 'price'.", "output": "grouped = data.groupby('region')['price'].mean()\nprint(grouped)"}
{"instruction": "Group sales_df by 'type' and calculate mean of 'value'.", "output": "grouped = sales_df.groupby('type')['value'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from dataset with index 'type' and values 'count'.", "output": "pivot = dataset.pivot_table(index='type', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert categorical column 'category' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['category'])\nprint(df1_ohe.head())"}
{"instruction": "Drop rows where 'quantity' is null in df1.", "output": "df1 = df1.dropna(subset=['quantity'])"}
{"instruction": "Rename column 'revenue' in data_clean to 'new_revenue'.", "output": "data_clean = data_clean.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Filter df_sales for rows where 'count' > 100.", "output": "df_sales_filtered = df_sales[df_sales['count'] > 100]"}
{"instruction": "Plot value counts of 'type' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df2, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['timestamp']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Convert categorical column 'department' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['department'])\nprint(df1_ohe.head())"}
{"instruction": "Fill missing values in 'weight' of sales_df with the median.", "output": "sales_df['weight'] = sales_df['weight'].fillna(sales_df['weight'].median())"}
{"instruction": "Convert 'salary' in df2 to datetime format.", "output": "import pandas as pd\ndf2['salary'] = pd.to_datetime(df2['salary'])"}
{"instruction": "Merge df2 with df2 on 'height' with inner join.", "output": "merged = df2.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Convert categorical column 'group' in df_sales to one-hot encoding.", "output": "df_sales_ohe = pd.get_dummies(df_sales, columns=['group'])\nprint(df_sales_ohe.head())"}
{"instruction": "Convert 'price' in df to datetime format.", "output": "import pandas as pd\ndf['price'] = pd.to_datetime(df['price'])"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'type' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='speed', data=data_clean)\nplt.title('Boxplot of speed by type')\nplt.show()"}
{"instruction": "Create a pivot table from df_sales with index 'department' and values 'speed'.", "output": "pivot = df_sales.pivot_table(index='department', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'sales'.", "output": "top3 = data_raw.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Count unique values in 'quantity' of df.", "output": "unique_count = df['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'score' of df.", "output": "unique_count = df['score'].nunique()\nprint(unique_count)"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in df1.", "output": "df1['score_rolling'] = df1['score'].rolling(window=5).mean()"}
{"instruction": "Filter df_sales for rows where 'value' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['value'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Create a pivot table from df with index 'type' and values 'income'.", "output": "pivot = df.pivot_table(index='type', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot value counts of 'type' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Create a pivot table from dataset with index 'category' and values 'weight'.", "output": "pivot = dataset.pivot_table(index='category', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'speed'.", "output": "top3 = data_raw.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Filter df_data for rows where 'value' contains 'A'.", "output": "df_data_sub = df_data[df_data['value'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Rename column 'height' in sales_df to 'new_height'.", "output": "sales_df = sales_df.rename(columns={'height': 'new_height'})"}
{"instruction": "Create a pivot table from data with index 'group' and values 'value'.", "output": "pivot = data.pivot_table(index='group', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in df1.", "output": "df1['speed_rolling'] = df1['speed'].rolling(window=5).mean()"}
{"instruction": "Filter df1 for rows where 'weight' > 100.", "output": "df1_filtered = df1[df1['weight'] > 100]"}
{"instruction": "Plot value counts of 'class' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Find the top 3 rows in data_clean with highest 'income'.", "output": "top3 = data_clean.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['date'] = pd.to_datetime(data_raw['date'])\nresampled = data_raw.set_index('date').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'score' monthly in sales_df.", "output": "import pandas as pd\nsales_df['sale_date'] = pd.to_datetime(sales_df['sale_date'])\nresampled = sales_df.set_index('sale_date').resample('M')['score'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'city' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='height', data=data_raw)\nplt.title('Boxplot of height by city')\nplt.show()"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'city' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='revenue', data=df1)\nplt.title('Boxplot of revenue by city')\nplt.show()"}
{"instruction": "Rename column 'weight' in dataset to 'new_weight'.", "output": "dataset = dataset.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Find the top 3 rows in df_sales with highest 'speed'.", "output": "top3 = df_sales.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Sort df1 by 'salary' descending.", "output": "df1 = df1.sort_values(by='salary', ascending=False)"}
{"instruction": "Filter data for rows where 'score' contains 'A'.", "output": "data_sub = data[data['score'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Rename column 'duration' in dataset to 'new_duration'.", "output": "dataset = dataset.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Count unique values in 'age' of df_data.", "output": "unique_count = df_data['age'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'age' of dataset with the median.", "output": "dataset['age'] = dataset['age'].fillna(dataset['age'].median())"}
{"instruction": "Fill missing values in 'value' of df with the median.", "output": "df['value'] = df['value'].fillna(df['value'].median())"}
{"instruction": "Create a pivot table from df2 with index 'type' and values 'score'.", "output": "pivot = df2.pivot_table(index='type', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert categorical column 'status' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['status'])\nprint(dataset_ohe.head())"}
{"instruction": "Count unique values in 'rating' of df2.", "output": "unique_count = df2['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'rating' is null in df2.", "output": "df2 = df2.dropna(subset=['rating'])"}
{"instruction": "Plot a boxplot of 'price' grouped by 'type' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='price', data=df1)\nplt.title('Boxplot of price by type')\nplt.show()"}
{"instruction": "Filter dataset for rows where 'rating' > 100.", "output": "dataset_filtered = dataset[dataset['rating'] > 100]"}
{"instruction": "Group df_sales by 'group' and calculate mean of 'duration'.", "output": "grouped = df_sales.groupby('group')['duration'].mean()\nprint(grouped)"}
{"instruction": "Group df2 by 'department' and calculate mean of 'age'.", "output": "grouped = df2.groupby('department')['age'].mean()\nprint(grouped)"}
{"instruction": "Convert 'age' in df1 to datetime format.", "output": "import pandas as pd\ndf1['age'] = pd.to_datetime(df1['age'])"}
{"instruction": "Convert 'income' in df1 to datetime format.", "output": "import pandas as pd\ndf1['income'] = pd.to_datetime(df1['income'])"}
{"instruction": "Rename column 'value' in sales_df to 'new_value'.", "output": "sales_df = sales_df.rename(columns={'value': 'new_value'})"}
{"instruction": "Fill missing values in 'count' of df_sales with the median.", "output": "df_sales['count'] = df_sales['count'].fillna(df_sales['count'].median())"}
{"instruction": "Group dataset by 'type' and calculate mean of 'rating'.", "output": "grouped = dataset.groupby('type')['rating'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'revenue' is null in df2.", "output": "df2 = df2.dropna(subset=['revenue'])"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Sort data_raw by 'revenue' descending.", "output": "data_raw = data_raw.sort_values(by='revenue', ascending=False)"}
{"instruction": "Plot value counts of 'type' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Fill missing values in 'sales' of data_clean with the median.", "output": "data_clean['sales'] = data_clean['sales'].fillna(data_clean['sales'].median())"}
{"instruction": "Merge dataset with df2 on 'rating' with inner join.", "output": "merged = dataset.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Perform time series resampling: sum 'salary' monthly in df.", "output": "import pandas as pd\ndf['order_date'] = pd.to_datetime(df['order_date'])\nresampled = df.set_index('order_date').resample('M')['salary'].sum()\nprint(resampled)"}
{"instruction": "Extract year and month from 'order_date' in df_data, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['order_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'status' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='rating', data=df2)\nplt.title('Boxplot of rating by status')\nplt.show()"}
{"instruction": "Group data_clean by 'region' and calculate mean of 'sales'.", "output": "grouped = data_clean.groupby('region')['sales'].mean()\nprint(grouped)"}
{"instruction": "Convert categorical column 'group' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['group'])\nprint(dataset_ohe.head())"}
{"instruction": "Extract year and month from 'sale_date' in df1, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['sale_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Fill missing values in 'sales' of sales_df with the median.", "output": "sales_df['sales'] = sales_df['sales'].fillna(sales_df['sales'].median())"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['sale_date'] = pd.to_datetime(data_raw['sale_date'])\nresampled = data_raw.set_index('sale_date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Sort df_sales by 'age' descending.", "output": "df_sales = df_sales.sort_values(by='age', ascending=False)"}
{"instruction": "Rename column 'value' in df1 to 'new_value'.", "output": "df1 = df1.rename(columns={'value': 'new_value'})"}
{"instruction": "Compute a rolling average of window size 5 on 'income' in df_data.", "output": "df_data['income_rolling'] = df_data['income'].rolling(window=5).mean()"}
{"instruction": "Convert categorical column 'category' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['category'])\nprint(sales_df_ohe.head())"}
{"instruction": "Filter data for rows where 'rating' > 100.", "output": "data_filtered = data[data['rating'] > 100]"}
{"instruction": "Drop rows where 'count' is null in df_data.", "output": "df_data = df_data.dropna(subset=['count'])"}
{"instruction": "Convert categorical column 'department' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['department'])\nprint(df_ohe.head())"}
{"instruction": "Perform EDA on data_clean: show null counts, descriptive stats, and histogram for numeric columns.", "output": "import matplotlib.pyplot as plt\nprint(data_clean.isnull().sum())\nprint(data_clean.describe())\nfor col in ['score', 'rating', 'quantity']:\n    plt.hist(data_clean[col].dropna(), bins=10)\n    plt.title(f'Histogram of price')\n    plt.show()"}
{"instruction": "Rename column 'duration' in df to 'new_duration'.", "output": "df = df.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Create a pivot table from data_raw with index 'category' and values 'speed'.", "output": "pivot = data_raw.pivot_table(index='category', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'count' of df2 with the median.", "output": "df2['count'] = df2['count'].fillna(df2['count'].median())"}
{"instruction": "Fill missing values in 'height' of data_clean with the median.", "output": "data_clean['height'] = data_clean['height'].fillna(data_clean['height'].median())"}
{"instruction": "Convert categorical column 'department' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['department'])\nprint(df_data_ohe.head())"}
{"instruction": "Fill missing values in 'weight' of df_data with the median.", "output": "df_data['weight'] = df_data['weight'].fillna(df_data['weight'].median())"}
{"instruction": "Drop rows where 'score' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['score'])"}
{"instruction": "Filter df_sales for rows where 'quantity' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['quantity'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Convert categorical column 'group' in df1 to one-hot encoding.", "output": "df1_ohe = pd.get_dummies(df1, columns=['group'])\nprint(df1_ohe.head())"}
{"instruction": "Fill missing values in 'price' of df_data with the median.", "output": "df_data['price'] = df_data['price'].fillna(df_data['price'].median())"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'category' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='revenue', data=df1)\nplt.title('Boxplot of revenue by category')\nplt.show()"}
{"instruction": "Fill missing values in 'value' of df1 with the median.", "output": "df1['value'] = df1['value'].fillna(df1['value'].median())"}
{"instruction": "Fill missing values in 'sales' of df2 with the median.", "output": "df2['sales'] = df2['sales'].fillna(df2['sales'].median())"}
{"instruction": "Extract year and month from 'date' in df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Find the top 3 rows in data with highest 'sales'.", "output": "top3 = data.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Drop rows where 'quantity' is null in df2.", "output": "df2 = df2.dropna(subset=['quantity'])"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in data.", "output": "import pandas as pd\ndata['sale_date'] = pd.to_datetime(data['sale_date'])\nresampled = data.set_index('sale_date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Find the top 3 rows in sales_df with highest 'quantity'.", "output": "top3 = sales_df.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in sales_df.", "output": "sales_df['revenue_rolling'] = sales_df['revenue'].rolling(window=5).mean()"}
{"instruction": "Filter dataset for rows where 'quantity' > 100.", "output": "dataset_filtered = dataset[dataset['quantity'] > 100]"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'type' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='revenue', data=df)\nplt.title('Boxplot of revenue by type')\nplt.show()"}
{"instruction": "Fill missing values in 'weight' of data_raw with the median.", "output": "data_raw['weight'] = data_raw['weight'].fillna(data_raw['weight'].median())"}
{"instruction": "Convert 'weight' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['weight'] = pd.to_datetime(df_sales['weight'])"}
{"instruction": "Convert 'duration' in df1 to datetime format.", "output": "import pandas as pd\ndf1['duration'] = pd.to_datetime(df1['duration'])"}
{"instruction": "Fill missing values in 'salary' of df2 with the median.", "output": "df2['salary'] = df2['salary'].fillna(df2['salary'].median())"}
{"instruction": "Fill missing values in 'weight' of df with the median.", "output": "df['weight'] = df['weight'].fillna(df['weight'].median())"}
{"instruction": "Merge df_data with df2 on 'quantity' with inner join.", "output": "merged = df_data.merge(df2, on='quantity', how='inner')\nprint(merged.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in df1.", "output": "df1['duration_rolling'] = df1['duration'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df with highest 'count'.", "output": "top3 = df.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Sort dataset by 'weight' descending.", "output": "dataset = dataset.sort_values(by='weight', ascending=False)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'quantity'.", "output": "top3 = data_raw.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Filter df for rows where 'value' > 100.", "output": "df_filtered = df[df['value'] > 100]"}
{"instruction": "Sort sales_df by 'count' descending.", "output": "sales_df = sales_df.sort_values(by='count', ascending=False)"}
{"instruction": "Convert 'price' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['price'] = pd.to_datetime(sales_df['price'])"}
{"instruction": "Plot value counts of 'region' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Filter df_data for rows where 'age' contains 'A'.", "output": "df_data_sub = df_data[df_data['age'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Merge data_raw with df2 on 'height' with inner join.", "output": "merged = data_raw.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in df1.", "output": "import pandas as pd\ndf1['date'] = pd.to_datetime(df1['date'])\nresampled = df1.set_index('date').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Convert 'salary' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['salary'] = pd.to_datetime(sales_df['salary'])"}
{"instruction": "Convert 'speed' in df1 to datetime format.", "output": "import pandas as pd\ndf1['speed'] = pd.to_datetime(df1['speed'])"}
{"instruction": "Sort data_raw by 'value' descending.", "output": "data_raw = data_raw.sort_values(by='value', ascending=False)"}
{"instruction": "Drop rows where 'income' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['income'])"}
{"instruction": "Convert 'speed' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['speed'] = pd.to_datetime(data_clean['speed'])"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in df.", "output": "import pandas as pd\ndf['date'] = pd.to_datetime(df['date'])\nresampled = df.set_index('date').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Create a pivot table from df_data with index 'city' and values 'age'.", "output": "pivot = df_data.pivot_table(index='city', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot value counts of 'type' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in df1.", "output": "import pandas as pd\ndf1['order_date'] = pd.to_datetime(df1['order_date'])\nresampled = df1.set_index('order_date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Fill missing values in 'value' of df_data with the median.", "output": "df_data['value'] = df_data['value'].fillna(df_data['value'].median())"}
{"instruction": "Create a pivot table from dataset with index 'class' and values 'height'.", "output": "pivot = dataset.pivot_table(index='class', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df_data with df2 on 'weight' with inner join.", "output": "merged = df_data.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Drop rows where 'sales' is null in df_data.", "output": "df_data = df_data.dropna(subset=['sales'])"}
{"instruction": "Filter data_clean for rows where 'revenue' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['revenue'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Convert 'speed' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['speed'] = pd.to_datetime(sales_df['speed'])"}
{"instruction": "Count unique values in 'quantity' of df_sales.", "output": "unique_count = df_sales['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'speed' in dataset to datetime format.", "output": "import pandas as pd\ndataset['speed'] = pd.to_datetime(dataset['speed'])"}
{"instruction": "Convert 'value' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['value'] = pd.to_datetime(sales_df['value'])"}
{"instruction": "Group df_sales by 'class' and calculate mean of 'duration'.", "output": "grouped = df_sales.groupby('class')['duration'].mean()\nprint(grouped)"}
{"instruction": "Merge dataset with df2 on 'price' with inner join.", "output": "merged = dataset.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Create a pivot table from data_clean with index 'type' and values 'quantity'.", "output": "pivot = data_clean.pivot_table(index='type', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df_sales for rows where 'price' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['price'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Group data_raw by 'class' and calculate mean of 'quantity'.", "output": "grouped = data_raw.groupby('class')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Filter data_clean for rows where 'score' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['score'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Sort df_data by 'count' descending.", "output": "df_data = df_data.sort_values(by='count', ascending=False)"}
{"instruction": "Group df by 'group' and calculate mean of 'weight'.", "output": "grouped = df.groupby('group')['weight'].mean()\nprint(grouped)"}
{"instruction": "Filter df_sales for rows where 'duration' > 100.", "output": "df_sales_filtered = df_sales[df_sales['duration'] > 100]"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in df2.", "output": "import pandas as pd\ndf2['timestamp'] = pd.to_datetime(df2['timestamp'])\nresampled = df2.set_index('timestamp').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'price' grouped by 'city' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='price', data=data)\nplt.title('Boxplot of price by city')\nplt.show()"}
{"instruction": "Rename column 'rating' in data to 'new_rating'.", "output": "data = data.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Group df2 by 'class' and calculate mean of 'score'.", "output": "grouped = df2.groupby('class')['score'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'sales' of df_data with the median.", "output": "df_data['sales'] = df_data['sales'].fillna(df_data['sales'].median())"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in df1.", "output": "import pandas as pd\ndf1['order_date'] = pd.to_datetime(df1['order_date'])\nresampled = df1.set_index('order_date').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Fill missing values in 'age' of df1 with the median.", "output": "df1['age'] = df1['age'].fillna(df1['age'].median())"}
{"instruction": "Filter data for rows where 'price' contains 'A'.", "output": "data_sub = data[data['price'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in data.", "output": "data['count_rolling'] = data['count'].rolling(window=5).mean()"}
{"instruction": "Sort df2 by 'height' descending.", "output": "df2 = df2.sort_values(by='height', ascending=False)"}
{"instruction": "Find the top 3 rows in df1 with highest 'price'.", "output": "top3 = df1.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Convert 'sales' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['sales'] = pd.to_datetime(df_data['sales'])"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in data_raw.", "output": "data_raw['salary_rolling'] = data_raw['salary'].rolling(window=5).mean()"}
{"instruction": "Rename column 'revenue' in sales_df to 'new_revenue'.", "output": "sales_df = sales_df.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Drop rows where 'score' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['score'])"}
{"instruction": "Plot a boxplot of 'price' grouped by 'class' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='price', data=df_sales)\nplt.title('Boxplot of price by class')\nplt.show()"}
{"instruction": "Merge df_data with df2 on 'salary' with inner join.", "output": "merged = df_data.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Filter data_clean for rows where 'duration' > 100.", "output": "data_clean_filtered = data_clean[data_clean['duration'] > 100]"}
{"instruction": "Convert 'age' in data to datetime format.", "output": "import pandas as pd\ndata['age'] = pd.to_datetime(data['age'])"}
{"instruction": "Find the top 3 rows in df2 with highest 'value'.", "output": "top3 = df2.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Create a pivot table from df1 with index 'class' and values 'weight'.", "output": "pivot = df1.pivot_table(index='class', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df1 with index 'region' and values 'revenue'.", "output": "pivot = df1.pivot_table(index='region', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df2 for rows where 'quantity' > 100.", "output": "df2_filtered = df2[df2['quantity'] > 100]"}
{"instruction": "Find the top 3 rows in df1 with highest 'speed'.", "output": "top3 = df1.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Merge data with df2 on 'age' with inner join.", "output": "merged = data.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'revenue' of sales_df.", "output": "unique_count = sales_df['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Merge sales_df with df2 on 'revenue' with inner join.", "output": "merged = sales_df.merge(df2, on='revenue', how='inner')\nprint(merged.head())"}
{"instruction": "Fill missing values in 'count' of df_data with the median.", "output": "df_data['count'] = df_data['count'].fillna(df_data['count'].median())"}
{"instruction": "Create a pivot table from df with index 'group' and values 'age'.", "output": "pivot = df.pivot_table(index='group', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'status' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='height', data=data)\nplt.title('Boxplot of height by status')\nplt.show()"}
{"instruction": "Rename column 'duration' in df_data to 'new_duration'.", "output": "df_data = df_data.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Count unique values in 'salary' of data_clean.", "output": "unique_count = data_clean['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Group df_data by 'class' and calculate mean of 'rating'.", "output": "grouped = df_data.groupby('class')['rating'].mean()\nprint(grouped)"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in sales_df.", "output": "sales_df['rating_rolling'] = sales_df['rating'].rolling(window=5).mean()"}
{"instruction": "Filter data_clean for rows where 'height' > 100.", "output": "data_clean_filtered = data_clean[data_clean['height'] > 100]"}
{"instruction": "Perform time series resampling: sum 'price' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['sale_date'] = pd.to_datetime(df_sales['sale_date'])\nresampled = df_sales.set_index('sale_date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'height' in data_raw.", "output": "data_raw['height_rolling'] = data_raw['height'].rolling(window=5).mean()"}
{"instruction": "Sort df_sales by 'duration' descending.", "output": "df_sales = df_sales.sort_values(by='duration', ascending=False)"}
{"instruction": "Convert 'income' in dataset to datetime format.", "output": "import pandas as pd\ndataset['income'] = pd.to_datetime(dataset['income'])"}
{"instruction": "Filter df_data for rows where 'speed' > 100.", "output": "df_data_filtered = df_data[df_data['speed'] > 100]"}
{"instruction": "Perform time series resampling: sum 'value' monthly in sales_df.", "output": "import pandas as pd\nsales_df['order_date'] = pd.to_datetime(sales_df['order_date'])\nresampled = sales_df.set_index('order_date').resample('M')['value'].sum()\nprint(resampled)"}
{"instruction": "Fill missing values in 'height' of df with the median.", "output": "df['height'] = df['height'].fillna(df['height'].median())"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in dataset.", "output": "import pandas as pd\ndataset['sale_date'] = pd.to_datetime(dataset['sale_date'])\nresampled = dataset.set_index('sale_date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Convert 'value' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['value'] = pd.to_datetime(data_raw['value'])"}
{"instruction": "Convert categorical column 'region' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['region'])\nprint(sales_df_ohe.head())"}
{"instruction": "Convert 'age' in df to datetime format.", "output": "import pandas as pd\ndf['age'] = pd.to_datetime(df['age'])"}
{"instruction": "Create a pivot table from df2 with index 'category' and values 'rating'.", "output": "pivot = df2.pivot_table(index='category', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'weight' of data.", "output": "unique_count = data['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'height' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['height'] = pd.to_datetime(df_sales['height'])"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Create a pivot table from sales_df with index 'status' and values 'sales'.", "output": "pivot = sales_df.pivot_table(index='status', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'count' of data_clean.", "output": "unique_count = data_clean['count'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'price' is null in df2.", "output": "df2 = df2.dropna(subset=['price'])"}
{"instruction": "Merge df_sales with df2 on 'count' with inner join.", "output": "merged = df_sales.merge(df2, on='count', how='inner')\nprint(merged.head())"}
{"instruction": "Fill missing values in 'value' of df2 with the median.", "output": "df2['value'] = df2['value'].fillna(df2['value'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in dataset.", "output": "dataset['score_rolling'] = dataset['score'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df_data with index 'type' and values 'count'.", "output": "pivot = df_data.pivot_table(index='type', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort data_clean by 'revenue' descending.", "output": "data_clean = data_clean.sort_values(by='revenue', ascending=False)"}
{"instruction": "Group df_data by 'category' and calculate mean of 'rating'.", "output": "grouped = df_data.groupby('category')['rating'].mean()\nprint(grouped)"}
{"instruction": "Convert 'duration' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['duration'] = pd.to_datetime(sales_df['duration'])"}
{"instruction": "Group df by 'city' and calculate mean of 'age'.", "output": "grouped = df.groupby('city')['age'].mean()\nprint(grouped)"}
{"instruction": "Convert categorical column 'class' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['class'])\nprint(df_ohe.head())"}
{"instruction": "Filter sales_df for rows where 'duration' > 100.", "output": "sales_df_filtered = sales_df[sales_df['duration'] > 100]"}
{"instruction": "Group sales_df by 'department' and calculate mean of 'income'.", "output": "grouped = sales_df.groupby('department')['income'].mean()\nprint(grouped)"}
{"instruction": "Group dataset by 'department' and calculate mean of 'speed'.", "output": "grouped = dataset.groupby('department')['speed'].mean()\nprint(grouped)"}
{"instruction": "Filter data_raw for rows where 'height' > 100.", "output": "data_raw_filtered = data_raw[data_raw['height'] > 100]"}
{"instruction": "Fill missing values in 'rating' of df_sales with the median.", "output": "df_sales['rating'] = df_sales['rating'].fillna(df_sales['rating'].median())"}
{"instruction": "Plot value counts of 'group' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Fill missing values in 'weight' of df_sales with the median.", "output": "df_sales['weight'] = df_sales['weight'].fillna(df_sales['weight'].median())"}
{"instruction": "Convert 'duration' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['duration'] = pd.to_datetime(data_clean['duration'])"}
{"instruction": "Create a pivot table from df_data with index 'status' and values 'price'.", "output": "pivot = df_data.pivot_table(index='status', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from data_clean with index 'region' and values 'income'.", "output": "pivot = data_clean.pivot_table(index='region', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df1 with index 'type' and values 'duration'.", "output": "pivot = df1.pivot_table(index='type', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from data with index 'department' and values 'price'.", "output": "pivot = data.pivot_table(index='department', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Group df1 by 'department' and calculate mean of 'sales'.", "output": "grouped = df1.groupby('department')['sales'].mean()\nprint(grouped)"}
{"instruction": "Group data by 'department' and calculate mean of 'age'.", "output": "grouped = data.groupby('department')['age'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from df2 with index 'department' and values 'speed'.", "output": "pivot = df2.pivot_table(index='department', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df1 for rows where 'value' > 100.", "output": "df1_filtered = df1[df1['value'] > 100]"}
{"instruction": "Plot value counts of 'status' in data_raw as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_raw['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Rename column 'price' in data_clean to 'new_price'.", "output": "data_clean = data_clean.rename(columns={'price': 'new_price'})"}
{"instruction": "Count unique values in 'count' of df2.", "output": "unique_count = df2['count'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'height' of data_clean.", "output": "unique_count = data_clean['height'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'sales' of df2.", "output": "unique_count = df2['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Group dataset by 'status' and calculate mean of 'speed'.", "output": "grouped = dataset.groupby('status')['speed'].mean()\nprint(grouped)"}
{"instruction": "Count unique values in 'revenue' of df_sales.", "output": "unique_count = df_sales['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'price' of df1 with the median.", "output": "df1['price'] = df1['price'].fillna(df1['price'].median())"}
{"instruction": "Convert categorical column 'city' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['city'])\nprint(df2_ohe.head())"}
{"instruction": "Sort sales_df by 'revenue' descending.", "output": "sales_df = sales_df.sort_values(by='revenue', ascending=False)"}
{"instruction": "Sort data_clean by 'weight' descending.", "output": "data_clean = data_clean.sort_values(by='weight', ascending=False)"}
{"instruction": "Create a pivot table from df with index 'department' and values 'age'.", "output": "pivot = df.pivot_table(index='department', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df_data with df2 on 'sales' with inner join.", "output": "merged = df_data.merge(df2, on='sales', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in data with highest 'count'.", "output": "top3 = data.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Filter sales_df for rows where 'speed' > 100.", "output": "sales_df_filtered = sales_df[sales_df['speed'] > 100]"}
{"instruction": "Merge df2 with df2 on 'weight' with inner join.", "output": "merged = df2.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Count missing values per column in df.", "output": "missing = df.isnull().sum()\nprint(missing)"}
{"instruction": "Extract year and month from 'timestamp' in df_sales, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['timestamp']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Find the top 3 rows in data_clean with highest 'duration'.", "output": "top3 = data_clean.nlargest(3, 'duration')\nprint(top3)"}
{"instruction": "Find the top 3 rows in df1 with highest 'rating'.", "output": "top3 = df1.nlargest(3, 'rating')\nprint(top3)"}
{"instruction": "Convert categorical column 'group' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['group'])\nprint(df_data_ohe.head())"}
{"instruction": "Group df_data by 'category' and calculate mean of 'score'.", "output": "grouped = df_data.groupby('category')['score'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'order_date' in df, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['order_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Group data_raw by 'type' and calculate mean of 'salary'.", "output": "grouped = data_raw.groupby('type')['salary'].mean()\nprint(grouped)"}
{"instruction": "Group data_raw by 'class' and calculate mean of 'duration'.", "output": "grouped = data_raw.groupby('class')['duration'].mean()\nprint(grouped)"}
{"instruction": "Filter sales_df for rows where 'age' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['age'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Rename column 'quantity' in data_clean to 'new_quantity'.", "output": "data_clean = data_clean.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Fill missing values in 'height' of data_raw with the median.", "output": "data_raw['height'] = data_raw['height'].fillna(data_raw['height'].median())"}
{"instruction": "Plot value counts of 'class' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['class'].value_counts().plot(kind='bar')\nplt.title('Value Counts of class')\nplt.show()"}
{"instruction": "Group data by 'group' and calculate mean of 'duration'.", "output": "grouped = data.groupby('group')['duration'].mean()\nprint(grouped)"}
{"instruction": "Filter sales_df for rows where 'rating' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['rating'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Sort data_clean by 'speed' descending.", "output": "data_clean = data_clean.sort_values(by='speed', ascending=False)"}
{"instruction": "Group dataset by 'category' and calculate mean of 'score'.", "output": "grouped = dataset.groupby('category')['score'].mean()\nprint(grouped)"}
{"instruction": "Sort data by 'rating' descending.", "output": "data = data.sort_values(by='rating', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in dataset.", "output": "import pandas as pd\ndataset['date'] = pd.to_datetime(dataset['date'])\nresampled = dataset.set_index('date').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Convert categorical column 'region' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['region'])\nprint(df_ohe.head())"}
{"instruction": "Drop rows where 'age' is null in df2.", "output": "df2 = df2.dropna(subset=['age'])"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'class' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='quantity', data=df2)\nplt.title('Boxplot of quantity by class')\nplt.show()"}
{"instruction": "Rename column 'salary' in df_data to 'new_salary'.", "output": "df_data = df_data.rename(columns={'salary': 'new_salary'})"}
{"instruction": "Merge data with df2 on 'income' with inner join.", "output": "merged = data.merge(df2, on='income', how='inner')\nprint(merged.head())"}
{"instruction": "Create a pivot table from data_clean with index 'group' and values 'revenue'.", "output": "pivot = data_clean.pivot_table(index='group', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df_sales with index 'class' and values 'weight'.", "output": "pivot = df_sales.pivot_table(index='class', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'count' of df1 with the median.", "output": "df1['count'] = df1['count'].fillna(df1['count'].median())"}
{"instruction": "Drop rows where 'quantity' is null in data.", "output": "data = data.dropna(subset=['quantity'])"}
{"instruction": "Fill missing values in 'age' of df_data with the median.", "output": "df_data['age'] = df_data['age'].fillna(df_data['age'].median())"}
{"instruction": "Drop rows where 'revenue' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['revenue'])"}
{"instruction": "Extract year and month from 'date' in df_data, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'age' in sales_df.", "output": "sales_df['age_rolling'] = sales_df['age'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df_sales with index 'category' and values 'value'.", "output": "pivot = df_sales.pivot_table(index='category', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df_sales for rows where 'salary' > 100.", "output": "df_sales_filtered = df_sales[df_sales['salary'] > 100]"}
{"instruction": "Convert 'revenue' in df to datetime format.", "output": "import pandas as pd\ndf['revenue'] = pd.to_datetime(df['revenue'])"}
{"instruction": "Drop rows where 'revenue' is null in df.", "output": "df = df.dropna(subset=['revenue'])"}
{"instruction": "Count unique values in 'rating' of data_clean.", "output": "unique_count = data_clean['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Extract year and month from 'order_date' in df_sales, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['order_date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Drop rows where 'score' is null in df.", "output": "df = df.dropna(subset=['score'])"}
{"instruction": "Convert 'rating' in df to datetime format.", "output": "import pandas as pd\ndf['rating'] = pd.to_datetime(df['rating'])"}
{"instruction": "Find the top 3 rows in data_raw with highest 'weight'.", "output": "top3 = data_raw.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Fill missing values in 'value' of dataset with the median.", "output": "dataset['value'] = dataset['value'].fillna(dataset['value'].median())"}
{"instruction": "Filter df_sales for rows where 'height' > 100.", "output": "df_sales_filtered = df_sales[df_sales['height'] > 100]"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Drop rows where 'rating' is null in dataset.", "output": "dataset = dataset.dropna(subset=['rating'])"}
{"instruction": "Rename column 'rating' in data_clean to 'new_rating'.", "output": "data_clean = data_clean.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in sales_df.", "output": "import pandas as pd\nsales_df['timestamp'] = pd.to_datetime(sales_df['timestamp'])\nresampled = sales_df.set_index('timestamp').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Group df_data by 'category' and calculate mean of 'height'.", "output": "grouped = df_data.groupby('category')['height'].mean()\nprint(grouped)"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in sales_df.", "output": "sales_df['count_rolling'] = sales_df['count'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in df2.", "output": "import pandas as pd\ndf2['timestamp'] = pd.to_datetime(df2['timestamp'])\nresampled = df2.set_index('timestamp').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Filter df_data for rows where 'salary' > 100.", "output": "df_data_filtered = df_data[df_data['salary'] > 100]"}
{"instruction": "Plot a boxplot of 'income' grouped by 'category' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='income', data=df_data)\nplt.title('Boxplot of income by category')\nplt.show()"}
{"instruction": "Find the top 3 rows in df1 with highest 'score'.", "output": "top3 = df1.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in data.", "output": "import pandas as pd\ndata['sale_date'] = pd.to_datetime(data['sale_date'])\nresampled = data.set_index('sale_date').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Convert 'score' in dataset to datetime format.", "output": "import pandas as pd\ndataset['score'] = pd.to_datetime(dataset['score'])"}
{"instruction": "Find the top 3 rows in data_clean with highest 'weight'.", "output": "top3 = data_clean.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Convert 'price' in dataset to datetime format.", "output": "import pandas as pd\ndataset['price'] = pd.to_datetime(dataset['price'])"}
{"instruction": "Plot value counts of 'category' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Fill missing values in 'duration' of df_sales with the median.", "output": "df_sales['duration'] = df_sales['duration'].fillna(df_sales['duration'].median())"}
{"instruction": "Sort data_clean by 'height' descending.", "output": "data_clean = data_clean.sort_values(by='height', ascending=False)"}
{"instruction": "Group sales_df by 'region' and calculate mean of 'speed'.", "output": "grouped = sales_df.groupby('region')['speed'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'sales' of data_raw with the median.", "output": "data_raw['sales'] = data_raw['sales'].fillna(data_raw['sales'].median())"}
{"instruction": "Plot a boxplot of 'price' grouped by 'class' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='price', data=sales_df)\nplt.title('Boxplot of price by class')\nplt.show()"}
{"instruction": "Merge df_sales with df2 on 'age' with inner join.", "output": "merged = df_sales.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Filter df1 for rows where 'rating' > 100.", "output": "df1_filtered = df1[df1['rating'] > 100]"}
{"instruction": "Count unique values in 'sales' of data.", "output": "unique_count = data['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'department' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='sales', data=df_data)\nplt.title('Boxplot of sales by department')\nplt.show()"}
{"instruction": "Count unique values in 'speed' of sales_df.", "output": "unique_count = sales_df['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Extract year and month from 'order_date' in data_raw, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['order_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Rename column 'count' in dataset to 'new_count'.", "output": "dataset = dataset.rename(columns={'count': 'new_count'})"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'department' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='rating', data=df)\nplt.title('Boxplot of rating by department')\nplt.show()"}
{"instruction": "Filter sales_df for rows where 'count' > 100.", "output": "sales_df_filtered = sales_df[sales_df['count'] > 100]"}
{"instruction": "Drop rows where 'value' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['value'])"}
{"instruction": "Plot a boxplot of 'count' grouped by 'region' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='count', data=data_raw)\nplt.title('Boxplot of count by region')\nplt.show()"}
{"instruction": "Group df1 by 'category' and calculate mean of 'revenue'.", "output": "grouped = df1.groupby('category')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Group data_raw by 'group' and calculate mean of 'value'.", "output": "grouped = data_raw.groupby('group')['value'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'count' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['timestamp'] = pd.to_datetime(df_sales['timestamp'])\nresampled = df_sales.set_index('timestamp').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Filter data_raw for rows where 'income' > 100.", "output": "data_raw_filtered = data_raw[data_raw['income'] > 100]"}
{"instruction": "Sort df2 by 'price' descending.", "output": "df2 = df2.sort_values(by='price', ascending=False)"}
{"instruction": "Plot value counts of 'group' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Filter sales_df for rows where 'quantity' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['quantity'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Drop rows where 'height' is null in dataset.", "output": "dataset = dataset.dropna(subset=['height'])"}
{"instruction": "Extract year and month from 'order_date' in data, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['order_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'price' in df2.", "output": "df2['price_rolling'] = df2['price'].rolling(window=5).mean()"}
{"instruction": "Convert 'salary' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['salary'] = pd.to_datetime(data_raw['salary'])"}
{"instruction": "Filter sales_df for rows where 'duration' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['duration'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Find the top 3 rows in sales_df with highest 'count'.", "output": "top3 = sales_df.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Plot value counts of 'status' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Drop rows where 'value' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['value'])"}
{"instruction": "Filter data_raw for rows where 'value' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['value'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Convert 'weight' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['weight'] = pd.to_datetime(df_data['weight'])"}
{"instruction": "Convert categorical column 'type' in data_clean to one-hot encoding.", "output": "data_clean_ohe = pd.get_dummies(data_clean, columns=['type'])\nprint(data_clean_ohe.head())"}
{"instruction": "Fill missing values in 'score' of data with the median.", "output": "data['score'] = data['score'].fillna(data['score'].median())"}
{"instruction": "Find the top 3 rows in sales_df with highest 'revenue'.", "output": "top3 = sales_df.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Sort df_data by 'score' descending.", "output": "df_data = df_data.sort_values(by='score', ascending=False)"}
{"instruction": "Extract year and month from 'timestamp' in dataset, then plot monthly average 'duration'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['timestamp']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['duration'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average duration')\nplt.show()"}
{"instruction": "Convert categorical column 'department' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['department'])\nprint(data_ohe.head())"}
{"instruction": "Plot a boxplot of 'weight' grouped by 'group' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='weight', data=data_raw)\nplt.title('Boxplot of weight by group')\nplt.show()"}
{"instruction": "Create a pivot table from data with index 'city' and values 'age'.", "output": "pivot = data.pivot_table(index='city', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df1 with highest 'quantity'.", "output": "top3 = df1.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Group df_data by 'department' and calculate mean of 'revenue'.", "output": "grouped = df_data.groupby('department')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Filter df2 for rows where 'count' contains 'A'.", "output": "df2_sub = df2[df2['count'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Group data_raw by 'type' and calculate mean of 'duration'.", "output": "grouped = data_raw.groupby('type')['duration'].mean()\nprint(grouped)"}
{"instruction": "Filter dataset for rows where 'count' > 100.", "output": "dataset_filtered = dataset[dataset['count'] > 100]"}
{"instruction": "Filter dataset for rows where 'age' > 100.", "output": "dataset_filtered = dataset[dataset['age'] > 100]"}
{"instruction": "Filter sales_df for rows where 'speed' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['speed'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Sort df_data by 'salary' descending.", "output": "df_data = df_data.sort_values(by='salary', ascending=False)"}
{"instruction": "Convert 'quantity' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['quantity'] = pd.to_datetime(df_sales['quantity'])"}
{"instruction": "Drop rows where 'sales' is null in df1.", "output": "df1 = df1.dropna(subset=['sales'])"}
{"instruction": "Extract year and month from 'sale_date' in df_sales, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['sale_date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Fill missing values in 'score' of data_clean with the median.", "output": "data_clean['score'] = data_clean['score'].fillna(data_clean['score'].median())"}
{"instruction": "Group data by 'group' and calculate mean of 'salary'.", "output": "grouped = data.groupby('group')['salary'].mean()\nprint(grouped)"}
{"instruction": "Merge dataset with df2 on 'income' with inner join.", "output": "merged = dataset.merge(df2, on='income', how='inner')\nprint(merged.head())"}
{"instruction": "Filter dataset for rows where 'weight' > 100.", "output": "dataset_filtered = dataset[dataset['weight'] > 100]"}
{"instruction": "Merge sales_df with df2 on 'score' with inner join.", "output": "merged = sales_df.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'price' in data.", "output": "data['price_rolling'] = data['price'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df_sales with index 'city' and values 'score'.", "output": "pivot = df_sales.pivot_table(index='city', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df_data for rows where 'age' > 100.", "output": "df_data_filtered = df_data[df_data['age'] > 100]"}
{"instruction": "Sort df1 by 'quantity' descending.", "output": "df1 = df1.sort_values(by='quantity', ascending=False)"}
{"instruction": "Count unique values in 'score' of df_data.", "output": "unique_count = df_data['score'].nunique()\nprint(unique_count)"}
{"instruction": "Group df2 by 'class' and calculate mean of 'age'.", "output": "grouped = df2.groupby('class')['age'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'duration' in sales_df to 'new_duration'.", "output": "sales_df = sales_df.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Convert 'count' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['count'] = pd.to_datetime(df_data['count'])"}
{"instruction": "Count unique values in 'quantity' of df2.", "output": "unique_count = df2['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from df_data with index 'department' and values 'rating'.", "output": "pivot = df_data.pivot_table(index='department', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort df_sales by 'score' descending.", "output": "df_sales = df_sales.sort_values(by='score', ascending=False)"}
{"instruction": "Sort data_raw by 'count' descending.", "output": "data_raw = data_raw.sort_values(by='count', ascending=False)"}
{"instruction": "Find the top 3 rows in sales_df with highest 'weight'.", "output": "top3 = sales_df.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in df.", "output": "df['speed_rolling'] = df['speed'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Count unique values in 'score' of data_clean.", "output": "unique_count = data_clean['score'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'height' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['height'])"}
{"instruction": "Extract year and month from 'date' in df, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in df1.", "output": "df1['value_rolling'] = df1['value'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df1 with index 'status' and values 'price'.", "output": "pivot = df1.pivot_table(index='status', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'age' grouped by 'status' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='age', data=df1)\nplt.title('Boxplot of age by status')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in dataset.", "output": "import pandas as pd\ndataset['order_date'] = pd.to_datetime(dataset['order_date'])\nresampled = dataset.set_index('order_date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Convert 'duration' in df to datetime format.", "output": "import pandas as pd\ndf['duration'] = pd.to_datetime(df['duration'])"}
{"instruction": "Drop rows where 'salary' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['salary'])"}
{"instruction": "Extract year and month from 'date' in dataset, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Rename column 'height' in dataset to 'new_height'.", "output": "dataset = dataset.rename(columns={'height': 'new_height'})"}
{"instruction": "Extract year and month from 'timestamp' in sales_df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['timestamp']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Filter df_data for rows where 'value' > 100.", "output": "df_data_filtered = df_data[df_data['value'] > 100]"}
{"instruction": "Convert categorical column 'class' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['class'])\nprint(sales_df_ohe.head())"}
{"instruction": "Convert 'sales' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['sales'] = pd.to_datetime(data_raw['sales'])"}
{"instruction": "Create a pivot table from df_sales with index 'region' and values 'age'.", "output": "pivot = df_sales.pivot_table(index='region', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Rename column 'height' in df2 to 'new_height'.", "output": "df2 = df2.rename(columns={'height': 'new_height'})"}
{"instruction": "Count unique values in 'quantity' of data_clean.", "output": "unique_count = data_clean['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Sort sales_df by 'quantity' descending.", "output": "sales_df = sales_df.sort_values(by='quantity', ascending=False)"}
{"instruction": "Merge data_clean with df2 on 'rating' with inner join.", "output": "merged = data_clean.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Group data_raw by 'region' and calculate mean of 'count'.", "output": "grouped = data_raw.groupby('region')['count'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'score' in df2 to 'new_score'.", "output": "df2 = df2.rename(columns={'score': 'new_score'})"}
{"instruction": "Extract year and month from 'sale_date' in df2, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['sale_date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Fill missing values in 'height' of df2 with the median.", "output": "df2['height'] = df2['height'].fillna(df2['height'].median())"}
{"instruction": "Filter data_clean for rows where 'age' > 100.", "output": "data_clean_filtered = data_clean[data_clean['age'] > 100]"}
{"instruction": "Plot value counts of 'city' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Rename column 'sales' in data_raw to 'new_sales'.", "output": "data_raw = data_raw.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Rename column 'speed' in df to 'new_speed'.", "output": "df = df.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Find the top 3 rows in dataset with highest 'height'.", "output": "top3 = dataset.nlargest(3, 'height')\nprint(top3)"}
{"instruction": "Sort df_data by 'height' descending.", "output": "df_data = df_data.sort_values(by='height', ascending=False)"}
{"instruction": "Sort data_clean by 'price' descending.", "output": "data_clean = data_clean.sort_values(by='price', ascending=False)"}
{"instruction": "Rename column 'income' in data to 'new_income'.", "output": "data = data.rename(columns={'income': 'new_income'})"}
{"instruction": "Convert 'score' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['score'] = pd.to_datetime(data_raw['score'])"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in df2.", "output": "import pandas as pd\ndf2['order_date'] = pd.to_datetime(df2['order_date'])\nresampled = df2.set_index('order_date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'sales' is null in df.", "output": "df = df.dropna(subset=['sales'])"}
{"instruction": "Rename column 'value' in df to 'new_value'.", "output": "df = df.rename(columns={'value': 'new_value'})"}
{"instruction": "Plot value counts of 'department' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Fill missing values in 'count' of data with the median.", "output": "data['count'] = data['count'].fillna(data['count'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in sales_df.", "output": "sales_df['speed_rolling'] = sales_df['speed'].rolling(window=5).mean()"}
{"instruction": "Group data_raw by 'department' and calculate mean of 'value'.", "output": "grouped = data_raw.groupby('department')['value'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'speed' is null in dataset.", "output": "dataset = dataset.dropna(subset=['speed'])"}
{"instruction": "Compute a rolling average of window size 5 on 'price' in df.", "output": "df['price_rolling'] = df['price'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df_sales with highest 'count'.", "output": "top3 = df_sales.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Count unique values in 'quantity' of df1.", "output": "unique_count = df1['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df_sales for rows where 'salary' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['salary'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Convert 'revenue' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['revenue'] = pd.to_datetime(df_data['revenue'])"}
{"instruction": "Group df2 by 'group' and calculate mean of 'quantity'.", "output": "grouped = df2.groupby('group')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Plot value counts of 'type' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Sort dataset by 'sales' descending.", "output": "dataset = dataset.sort_values(by='sales', ascending=False)"}
{"instruction": "Drop rows where 'speed' is null in df1.", "output": "df1 = df1.dropna(subset=['speed'])"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'status' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='speed', data=sales_df)\nplt.title('Boxplot of speed by status')\nplt.show()"}
{"instruction": "Create a pivot table from df with index 'group' and values 'quantity'.", "output": "pivot = df.pivot_table(index='group', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df1 for rows where 'duration' contains 'A'.", "output": "df1_sub = df1[df1['duration'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Filter data_clean for rows where 'count' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['count'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Create a pivot table from data_clean with index 'group' and values 'rating'.", "output": "pivot = data_clean.pivot_table(index='group', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_clean for rows where 'height' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['height'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Plot value counts of 'region' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Create a pivot table from df2 with index 'city' and values 'duration'.", "output": "pivot = df2.pivot_table(index='city', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort df1 by 'height' descending.", "output": "df1 = df1.sort_values(by='height', ascending=False)"}
{"instruction": "Sort sales_df by 'price' descending.", "output": "sales_df = sales_df.sort_values(by='price', ascending=False)"}
{"instruction": "Plot a boxplot of 'income' grouped by 'type' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='income', data=df1)\nplt.title('Boxplot of income by type')\nplt.show()"}
{"instruction": "Filter data for rows where 'height' > 100.", "output": "data_filtered = data[data['height'] > 100]"}
{"instruction": "Count unique values in 'price' of data_clean.", "output": "unique_count = data_clean['price'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'count' grouped by 'status' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='count', data=data)\nplt.title('Boxplot of count by status')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in data, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['timestamp']).dt.to_period('M')\nmonthly = data.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Create a pivot table from df with index 'city' and values 'duration'.", "output": "pivot = df.pivot_table(index='city', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df_data with index 'city' and values 'revenue'.", "output": "pivot = df_data.pivot_table(index='city', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df1 with df2 on 'price' with inner join.", "output": "merged = df1.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Convert 'sales' in dataset to datetime format.", "output": "import pandas as pd\ndataset['sales'] = pd.to_datetime(dataset['sales'])"}
{"instruction": "Count unique values in 'age' of data_raw.", "output": "unique_count = data_raw['age'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'duration' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['duration'])"}
{"instruction": "Compute a rolling average of window size 5 on 'price' in df_data.", "output": "df_data['price_rolling'] = df_data['price'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'revenue' monthly in sales_df.", "output": "import pandas as pd\nsales_df['timestamp'] = pd.to_datetime(sales_df['timestamp'])\nresampled = sales_df.set_index('timestamp').resample('M')['revenue'].sum()\nprint(resampled)"}
{"instruction": "Filter df_data for rows where 'rating' contains 'A'.", "output": "df_data_sub = df_data[df_data['rating'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Fill missing values in 'speed' of data_raw with the median.", "output": "data_raw['speed'] = data_raw['speed'].fillna(data_raw['speed'].median())"}
{"instruction": "Filter data for rows where 'value' contains 'A'.", "output": "data_sub = data[data['value'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Count unique values in 'price' of data_raw.", "output": "unique_count = data_raw['price'].nunique()\nprint(unique_count)"}
{"instruction": "Group df1 by 'status' and calculate mean of 'weight'.", "output": "grouped = df1.groupby('status')['weight'].mean()\nprint(grouped)"}
{"instruction": "Filter df1 for rows where 'salary' > 100.", "output": "df1_filtered = df1[df1['salary'] > 100]"}
{"instruction": "Convert 'height' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['height'] = pd.to_datetime(data_raw['height'])"}
{"instruction": "Group df by 'department' and calculate mean of 'count'.", "output": "grouped = df.groupby('department')['count'].mean()\nprint(grouped)"}
{"instruction": "Plot a boxplot of 'weight' grouped by 'category' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='weight', data=df)\nplt.title('Boxplot of weight by category')\nplt.show()"}
{"instruction": "Drop rows where 'speed' is null in df2.", "output": "df2 = df2.dropna(subset=['speed'])"}
{"instruction": "Convert 'duration' in dataset to datetime format.", "output": "import pandas as pd\ndataset['duration'] = pd.to_datetime(dataset['duration'])"}
{"instruction": "Group data_clean by 'department' and calculate mean of 'value'.", "output": "grouped = data_clean.groupby('department')['value'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'age' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['age'])"}
{"instruction": "Merge data_raw with df2 on 'rating' with inner join.", "output": "merged = data_raw.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'sales' of dataset.", "output": "unique_count = dataset['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Merge df_data with df2 on 'count' with inner join.", "output": "merged = df_data.merge(df2, on='count', how='inner')\nprint(merged.head())"}
{"instruction": "Sort dataset by 'height' descending.", "output": "dataset = dataset.sort_values(by='height', ascending=False)"}
{"instruction": "Create a pivot table from data with index 'class' and values 'duration'.", "output": "pivot = data.pivot_table(index='class', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in sales_df with highest 'price'.", "output": "top3 = sales_df.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Filter dataset for rows where 'duration' contains 'A'.", "output": "dataset_sub = dataset[dataset['duration'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Drop rows where 'income' is null in df1.", "output": "df1 = df1.dropna(subset=['income'])"}
{"instruction": "Count unique values in 'speed' of data.", "output": "unique_count = data['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'quantity' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['quantity'])"}
{"instruction": "Extract year and month from 'timestamp' in sales_df, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['timestamp']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in df2.", "output": "df2['weight_rolling'] = df2['weight'].rolling(window=5).mean()"}
{"instruction": "Group df by 'region' and calculate mean of 'quantity'.", "output": "grouped = df.groupby('region')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'quantity' is null in df_data.", "output": "df_data = df_data.dropna(subset=['quantity'])"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Extract year and month from 'date' in df_data, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df_sales, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['timestamp']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Convert 'score' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['score'] = pd.to_datetime(df_data['score'])"}
{"instruction": "Compute a rolling average of window size 5 on 'speed' in df2.", "output": "df2['speed_rolling'] = df2['speed'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df_sales with highest 'revenue'.", "output": "top3 = df_sales.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in df1.", "output": "df1['sales_rolling'] = df1['sales'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'height' of sales_df with the median.", "output": "sales_df['height'] = sales_df['height'].fillna(sales_df['height'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in df1.", "output": "df1['count_rolling'] = df1['count'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Filter sales_df for rows where 'salary' > 100.", "output": "sales_df_filtered = sales_df[sales_df['salary'] > 100]"}
{"instruction": "Fill missing values in 'income' of data_clean with the median.", "output": "data_clean['income'] = data_clean['income'].fillna(data_clean['income'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'height' in data_clean.", "output": "data_clean['height_rolling'] = data_clean['height'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'order_date' in df_data, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['order_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Rename column 'income' in df1 to 'new_income'.", "output": "df1 = df1.rename(columns={'income': 'new_income'})"}
{"instruction": "Convert 'weight' in df1 to datetime format.", "output": "import pandas as pd\ndf1['weight'] = pd.to_datetime(df1['weight'])"}
{"instruction": "Filter data_raw for rows where 'speed' > 100.", "output": "data_raw_filtered = data_raw[data_raw['speed'] > 100]"}
{"instruction": "Filter dataset for rows where 'value' contains 'A'.", "output": "dataset_sub = dataset[dataset['value'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Filter df2 for rows where 'height' > 100.", "output": "df2_filtered = df2[df2['height'] > 100]"}
{"instruction": "Extract year and month from 'sale_date' in data_clean, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['sale_date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Count unique values in 'weight' of data_raw.", "output": "unique_count = data_raw['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Convert categorical column 'region' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['region'])\nprint(df_data_ohe.head())"}
{"instruction": "Rename column 'age' in df to 'new_age'.", "output": "df = df.rename(columns={'age': 'new_age'})"}
{"instruction": "Find the top 3 rows in df2 with highest 'score'.", "output": "top3 = df2.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Rename column 'quantity' in sales_df to 'new_quantity'.", "output": "sales_df = sales_df.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Fill missing values in 'height' of df1 with the median.", "output": "df1['height'] = df1['height'].fillna(df1['height'].median())"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Filter df1 for rows where 'salary' contains 'A'.", "output": "df1_sub = df1[df1['salary'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Convert categorical column 'type' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['type'])\nprint(df_ohe.head())"}
{"instruction": "Merge data_raw with df2 on 'sales' with inner join.", "output": "merged = data_raw.merge(df2, on='sales', how='inner')\nprint(merged.head())"}
{"instruction": "Filter df for rows where 'height' > 100.", "output": "df_filtered = df[df['height'] > 100]"}
{"instruction": "Count unique values in 'value' of df_data.", "output": "unique_count = df_data['value'].nunique()\nprint(unique_count)"}
{"instruction": "Find the top 3 rows in dataset with highest 'speed'.", "output": "top3 = dataset.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Create a pivot table from dataset with index 'type' and values 'duration'.", "output": "pivot = dataset.pivot_table(index='type', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort df2 by 'count' descending.", "output": "df2 = df2.sort_values(by='count', ascending=False)"}
{"instruction": "Count unique values in 'rating' of dataset.", "output": "unique_count = dataset['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'price' is null in df_data.", "output": "df_data = df_data.dropna(subset=['price'])"}
{"instruction": "Filter data_clean for rows where 'weight' > 100.", "output": "data_clean_filtered = data_clean[data_clean['weight'] > 100]"}
{"instruction": "Perform time series resampling: sum 'count' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['timestamp'] = pd.to_datetime(data_raw['timestamp'])\nresampled = data_raw.set_index('timestamp').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Sort df1 by 'duration' descending.", "output": "df1 = df1.sort_values(by='duration', ascending=False)"}
{"instruction": "Fill missing values in 'quantity' of df with the median.", "output": "df['quantity'] = df['quantity'].fillna(df['quantity'].median())"}
{"instruction": "Perform time series resampling: sum 'price' monthly in df_data.", "output": "import pandas as pd\ndf_data['sale_date'] = pd.to_datetime(df_data['sale_date'])\nresampled = df_data.set_index('sale_date').resample('M')['price'].sum()\nprint(resampled)"}
{"instruction": "Rename column 'speed' in data_clean to 'new_speed'.", "output": "data_clean = data_clean.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Extract year and month from 'date' in df_data, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Plot a boxplot of 'height' grouped by 'department' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='height', data=df2)\nplt.title('Boxplot of height by department')\nplt.show()"}
{"instruction": "Fill missing values in 'rating' of df with the median.", "output": "df['rating'] = df['rating'].fillna(df['rating'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in data.", "output": "data['rating_rolling'] = data['rating'].rolling(window=5).mean()"}
{"instruction": "Group df_sales by 'class' and calculate mean of 'value'.", "output": "grouped = df_sales.groupby('class')['value'].mean()\nprint(grouped)"}
{"instruction": "Filter data_clean for rows where 'income' contains 'A'.", "output": "data_clean_sub = data_clean[data_clean['income'].str.contains('A')]\nprint(data_clean_sub.head())"}
{"instruction": "Fill missing values in 'rating' of dataset with the median.", "output": "dataset['rating'] = dataset['rating'].fillna(dataset['rating'].median())"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['timestamp'] = pd.to_datetime(data_raw['timestamp'])\nresampled = data_raw.set_index('timestamp').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Find the top 3 rows in data_raw with highest 'income'.", "output": "top3 = data_raw.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Plot a boxplot of 'count' grouped by 'group' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='count', data=df)\nplt.title('Boxplot of count by group')\nplt.show()"}
{"instruction": "Group df by 'category' and calculate mean of 'weight'.", "output": "grouped = df.groupby('category')['weight'].mean()\nprint(grouped)"}
{"instruction": "Sort df1 by 'sales' descending.", "output": "df1 = df1.sort_values(by='sales', ascending=False)"}
{"instruction": "Sort data by 'price' descending.", "output": "data = data.sort_values(by='price', ascending=False)"}
{"instruction": "Convert categorical column 'city' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['city'])\nprint(sales_df_ohe.head())"}
{"instruction": "Group sales_df by 'group' and calculate mean of 'age'.", "output": "grouped = sales_df.groupby('group')['age'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from sales_df with index 'type' and values 'weight'.", "output": "pivot = sales_df.pivot_table(index='type', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Drop rows where 'sales' is null in dataset.", "output": "dataset = dataset.dropna(subset=['sales'])"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Sort df2 by 'revenue' descending.", "output": "df2 = df2.sort_values(by='revenue', ascending=False)"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in data_clean.", "output": "data_clean['value_rolling'] = data_clean['value'].rolling(window=5).mean()"}
{"instruction": "Convert 'income' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['income'] = pd.to_datetime(data_raw['income'])"}
{"instruction": "Group data by 'category' and calculate mean of 'weight'.", "output": "grouped = data.groupby('category')['weight'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'height' in df_data to 'new_height'.", "output": "df_data = df_data.rename(columns={'height': 'new_height'})"}
{"instruction": "Group df by 'region' and calculate mean of 'weight'.", "output": "grouped = df.groupby('region')['weight'].mean()\nprint(grouped)"}
{"instruction": "Convert 'price' in df2 to datetime format.", "output": "import pandas as pd\ndf2['price'] = pd.to_datetime(df2['price'])"}
{"instruction": "Convert categorical column 'city' in df_sales to one-hot encoding.", "output": "df_sales_ohe = pd.get_dummies(df_sales, columns=['city'])\nprint(df_sales_ohe.head())"}
{"instruction": "Sort dataset by 'revenue' descending.", "output": "dataset = dataset.sort_values(by='revenue', ascending=False)"}
{"instruction": "Drop rows where 'weight' is null in data.", "output": "data = data.dropna(subset=['weight'])"}
{"instruction": "Find the top 3 rows in data_raw with highest 'count'.", "output": "top3 = data_raw.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Convert categorical column 'city' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['city'])\nprint(data_ohe.head())"}
{"instruction": "Group df_sales by 'class' and calculate mean of 'rating'.", "output": "grouped = df_sales.groupby('class')['rating'].mean()\nprint(grouped)"}
{"instruction": "Count unique values in 'sales' of data_raw.", "output": "unique_count = data_raw['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Filter dataset for rows where 'sales' > 100.", "output": "dataset_filtered = dataset[dataset['sales'] > 100]"}
{"instruction": "Create a pivot table from data_clean with index 'department' and values 'weight'.", "output": "pivot = data_clean.pivot_table(index='department', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'status' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='duration', data=df_sales)\nplt.title('Boxplot of duration by status')\nplt.show()"}
{"instruction": "Filter df_sales for rows where 'weight' > 100.", "output": "df_sales_filtered = df_sales[df_sales['weight'] > 100]"}
{"instruction": "Rename column 'salary' in data_clean to 'new_salary'.", "output": "data_clean = data_clean.rename(columns={'salary': 'new_salary'})"}
{"instruction": "Find the top 3 rows in df_sales with highest 'weight'.", "output": "top3 = df_sales.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Create a pivot table from df1 with index 'department' and values 'score'.", "output": "pivot = df1.pivot_table(index='department', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df_sales with df2 on 'rating' with inner join.", "output": "merged = df_sales.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in data_clean with highest 'rating'.", "output": "top3 = data_clean.nlargest(3, 'rating')\nprint(top3)"}
{"instruction": "Count unique values in 'value' of df_sales.", "output": "unique_count = df_sales['value'].nunique()\nprint(unique_count)"}
{"instruction": "Extract year and month from 'timestamp' in data_raw, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['timestamp']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Find the top 3 rows in data_raw with highest 'duration'.", "output": "top3 = data_raw.nlargest(3, 'duration')\nprint(top3)"}
{"instruction": "Create a pivot table from data_raw with index 'status' and values 'height'.", "output": "pivot = data_raw.pivot_table(index='status', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert 'value' in df to datetime format.", "output": "import pandas as pd\ndf['value'] = pd.to_datetime(df['value'])"}
{"instruction": "Create a pivot table from data with index 'city' and values 'speed'.", "output": "pivot = data.pivot_table(index='city', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'value' of df2.", "output": "unique_count = df2['value'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'price' grouped by 'status' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='price', data=data_raw)\nplt.title('Boxplot of price by status')\nplt.show()"}
{"instruction": "Rename column 'speed' in df_sales to 'new_speed'.", "output": "df_sales = df_sales.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Drop rows where 'income' is null in df_data.", "output": "df_data = df_data.dropna(subset=['income'])"}
{"instruction": "Filter data_clean for rows where 'sales' > 100.", "output": "data_clean_filtered = data_clean[data_clean['sales'] > 100]"}
{"instruction": "Extract year and month from 'date' in dataset, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Sort df1 by 'revenue' descending.", "output": "df1 = df1.sort_values(by='revenue', ascending=False)"}
{"instruction": "Merge df2 with df2 on 'score' with inner join.", "output": "merged = df2.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Convert categorical column 'status' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['status'])\nprint(df2_ohe.head())"}
{"instruction": "Create a pivot table from df_data with index 'city' and values 'count'.", "output": "pivot = df_data.pivot_table(index='city', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in dataset.", "output": "dataset['rating_rolling'] = dataset['rating'].rolling(window=5).mean()"}
{"instruction": "Group data_raw by 'department' and calculate mean of 'sales'.", "output": "grouped = data_raw.groupby('department')['sales'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'count' of df with the median.", "output": "df['count'] = df['count'].fillna(df['count'].median())"}
{"instruction": "Rename column 'weight' in df to 'new_weight'.", "output": "df = df.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Find the top 3 rows in df with highest 'sales'.", "output": "top3 = df.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Filter dataset for rows where 'income' > 100.", "output": "dataset_filtered = dataset[dataset['income'] > 100]"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'category' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='duration', data=data_clean)\nplt.title('Boxplot of duration by category')\nplt.show()"}
{"instruction": "Filter df_data for rows where 'sales' contains 'A'.", "output": "df_data_sub = df_data[df_data['sales'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Find the top 3 rows in df_data with highest 'speed'.", "output": "top3 = df_data.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in data_raw.", "output": "data_raw['revenue_rolling'] = data_raw['revenue'].rolling(window=5).mean()"}
{"instruction": "Compute a rolling average of window size 5 on 'price' in dataset.", "output": "dataset['price_rolling'] = dataset['price'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'order_date' in df_data, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['order_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Group data by 'type' and calculate mean of 'value'.", "output": "grouped = data.groupby('type')['value'].mean()\nprint(grouped)"}
{"instruction": "Filter dataset for rows where 'count' contains 'A'.", "output": "dataset_sub = dataset[dataset['count'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Fill missing values in 'price' of sales_df with the median.", "output": "sales_df['price'] = sales_df['price'].fillna(sales_df['price'].median())"}
{"instruction": "Create a pivot table from df with index 'class' and values 'score'.", "output": "pivot = df.pivot_table(index='class', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group dataset by 'status' and calculate mean of 'salary'.", "output": "grouped = dataset.groupby('status')['salary'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'rating' of data_raw with the median.", "output": "data_raw['rating'] = data_raw['rating'].fillna(data_raw['rating'].median())"}
{"instruction": "Convert 'weight' in data to datetime format.", "output": "import pandas as pd\ndata['weight'] = pd.to_datetime(data['weight'])"}
{"instruction": "Sort df_data by 'income' descending.", "output": "df_data = df_data.sort_values(by='income', ascending=False)"}
{"instruction": "Compute a rolling average of window size 5 on 'height' in dataset.", "output": "dataset['height_rolling'] = dataset['height'].rolling(window=5).mean()"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'status' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='sales', data=df2)\nplt.title('Boxplot of sales by status')\nplt.show()"}
{"instruction": "Count unique values in 'count' of df1.", "output": "unique_count = df1['count'].nunique()\nprint(unique_count)"}
{"instruction": "Perform time series resampling: sum 'score' monthly in df2.", "output": "import pandas as pd\ndf2['sale_date'] = pd.to_datetime(df2['sale_date'])\nresampled = df2.set_index('sale_date').resample('M')['score'].sum()\nprint(resampled)"}
{"instruction": "Convert 'value' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['value'] = pd.to_datetime(df_sales['value'])"}
{"instruction": "Create a pivot table from dataset with index 'region' and values 'price'.", "output": "pivot = dataset.pivot_table(index='region', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'status' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='revenue', data=dataset)\nplt.title('Boxplot of revenue by status')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df1, then plot monthly average 'weight'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['timestamp']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['weight'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average weight')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'age' > 100.", "output": "df2_filtered = df2[df2['age'] > 100]"}
{"instruction": "Find the top 3 rows in df2 with highest 'height'.", "output": "top3 = df2.nlargest(3, 'height')\nprint(top3)"}
{"instruction": "Drop rows where 'income' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['income'])"}
{"instruction": "Group df2 by 'group' and calculate mean of 'count'.", "output": "grouped = df2.groupby('group')['count'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from df2 with index 'department' and values 'age'.", "output": "pivot = df2.pivot_table(index='department', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'revenue' of data_clean with the median.", "output": "data_clean['revenue'] = data_clean['revenue'].fillna(data_clean['revenue'].median())"}
{"instruction": "Rename column 'value' in data_clean to 'new_value'.", "output": "data_clean = data_clean.rename(columns={'value': 'new_value'})"}
{"instruction": "Convert 'revenue' in df2 to datetime format.", "output": "import pandas as pd\ndf2['revenue'] = pd.to_datetime(df2['revenue'])"}
{"instruction": "Count unique values in 'quantity' of df_data.", "output": "unique_count = df_data['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in sales_df.", "output": "sales_df['salary_rolling'] = sales_df['salary'].rolling(window=5).mean()"}
{"instruction": "Convert categorical column 'category' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['category'])\nprint(data_raw_ohe.head())"}
{"instruction": "Sort data_raw by 'rating' descending.", "output": "data_raw = data_raw.sort_values(by='rating', ascending=False)"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'department' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='duration', data=df2)\nplt.title('Boxplot of duration by department')\nplt.show()"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'category' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='duration', data=dataset)\nplt.title('Boxplot of duration by category')\nplt.show()"}
{"instruction": "Merge df1 with df2 on 'rating' with inner join.", "output": "merged = df1.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'weight' of df_data.", "output": "unique_count = df_data['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df_data for rows where 'duration' contains 'A'.", "output": "df_data_sub = df_data[df_data['duration'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Count unique values in 'age' of df_sales.", "output": "unique_count = df_sales['age'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from data with index 'category' and values 'sales'.", "output": "pivot = data.pivot_table(index='category', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_clean for rows where 'rating' > 100.", "output": "data_clean_filtered = data_clean[data_clean['rating'] > 100]"}
{"instruction": "Extract year and month from 'timestamp' in df, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['timestamp']).dt.to_period('M')\nmonthly = df.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Sort df_sales by 'speed' descending.", "output": "df_sales = df_sales.sort_values(by='speed', ascending=False)"}
{"instruction": "Sort df1 by 'age' descending.", "output": "df1 = df1.sort_values(by='age', ascending=False)"}
{"instruction": "Convert 'age' in df2 to datetime format.", "output": "import pandas as pd\ndf2['age'] = pd.to_datetime(df2['age'])"}
{"instruction": "Filter data for rows where 'value' > 100.", "output": "data_filtered = data[data['value'] > 100]"}
{"instruction": "Group sales_df by 'group' and calculate mean of 'duration'.", "output": "grouped = sales_df.groupby('group')['duration'].mean()\nprint(grouped)"}
{"instruction": "Convert categorical column 'status' in df_data to one-hot encoding.", "output": "df_data_ohe = pd.get_dummies(df_data, columns=['status'])\nprint(df_data_ohe.head())"}
{"instruction": "Rename column 'value' in data_raw to 'new_value'.", "output": "data_raw = data_raw.rename(columns={'value': 'new_value'})"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in data_raw.", "output": "data_raw['duration_rolling'] = data_raw['duration'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'date' in df_sales, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Create a pivot table from df with index 'city' and values 'value'.", "output": "pivot = df.pivot_table(index='city', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot value counts of 'city' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Merge data with df2 on 'height' with inner join.", "output": "merged = data.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'salary' of dataset.", "output": "unique_count = dataset['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from data with index 'group' and values 'height'.", "output": "pivot = data.pivot_table(index='group', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert categorical column 'group' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['group'])\nprint(df2_ohe.head())"}
{"instruction": "Fill missing values in 'price' of df_sales with the median.", "output": "df_sales['price'] = df_sales['price'].fillna(df_sales['price'].median())"}
{"instruction": "Convert 'age' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['age'] = pd.to_datetime(df_data['age'])"}
{"instruction": "Find the top 3 rows in data_clean with highest 'speed'.", "output": "top3 = data_clean.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Find the top 3 rows in df with highest 'age'.", "output": "top3 = df.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Drop rows where 'value' is null in data.", "output": "data = data.dropna(subset=['value'])"}
{"instruction": "Extract year and month from 'sale_date' in df1, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['sale_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'count' monthly in df1.", "output": "import pandas as pd\ndf1['sale_date'] = pd.to_datetime(df1['sale_date'])\nresampled = df1.set_index('sale_date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Extract year and month from 'sale_date' in data_raw, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['sale_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Create a pivot table from data_clean with index 'department' and values 'duration'.", "output": "pivot = data_clean.pivot_table(index='department', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'count' grouped by 'class' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='count', data=data)\nplt.title('Boxplot of count by class')\nplt.show()"}
{"instruction": "Filter dataset for rows where 'rating' contains 'A'.", "output": "dataset_sub = dataset[dataset['rating'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Count unique values in 'count' of data.", "output": "unique_count = data['count'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df_data for rows where 'height' > 100.", "output": "df_data_filtered = df_data[df_data['height'] > 100]"}
{"instruction": "Filter df_data for rows where 'income' > 100.", "output": "df_data_filtered = df_data[df_data['income'] > 100]"}
{"instruction": "Convert 'speed' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['speed'] = pd.to_datetime(df_data['speed'])"}
{"instruction": "Sort data by 'count' descending.", "output": "data = data.sort_values(by='count', ascending=False)"}
{"instruction": "Drop rows where 'price' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['price'])"}
{"instruction": "Count unique values in 'price' of df_sales.", "output": "unique_count = df_sales['price'].nunique()\nprint(unique_count)"}
{"instruction": "Group df2 by 'class' and calculate mean of 'count'.", "output": "grouped = df2.groupby('class')['count'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'date' in df_data, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Create a pivot table from data with index 'type' and values 'height'.", "output": "pivot = data.pivot_table(index='type', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in data with highest 'speed'.", "output": "top3 = data.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Find the top 3 rows in df2 with highest 'rating'.", "output": "top3 = df2.nlargest(3, 'rating')\nprint(top3)"}
{"instruction": "Extract year and month from 'order_date' in df_data, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['order_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Count unique values in 'price' of data.", "output": "unique_count = data['price'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'salary' in df_data to datetime format.", "output": "import pandas as pd\ndf_data['salary'] = pd.to_datetime(df_data['salary'])"}
{"instruction": "Fill missing values in 'age' of df with the median.", "output": "df['age'] = df['age'].fillna(df['age'].median())"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'class' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='duration', data=data_clean)\nplt.title('Boxplot of duration by class')\nplt.show()"}
{"instruction": "Filter df for rows where 'count' contains 'A'.", "output": "df_sub = df[df['count'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Group df_sales by 'type' and calculate mean of 'value'.", "output": "grouped = df_sales.groupby('type')['value'].mean()\nprint(grouped)"}
{"instruction": "Filter data for rows where 'quantity' > 100.", "output": "data_filtered = data[data['quantity'] > 100]"}
{"instruction": "Filter data_raw for rows where 'income' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['income'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Sort data_clean by 'duration' descending.", "output": "data_clean = data_clean.sort_values(by='duration', ascending=False)"}
{"instruction": "Plot a boxplot of 'value' grouped by 'department' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='value', data=df_data)\nplt.title('Boxplot of value by department')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Merge dataset with df2 on 'quantity' with inner join.", "output": "merged = dataset.merge(df2, on='quantity', how='inner')\nprint(merged.head())"}
{"instruction": "Sort data by 'revenue' descending.", "output": "data = data.sort_values(by='revenue', ascending=False)"}
{"instruction": "Drop rows where 'speed' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['speed'])"}
{"instruction": "Extract year and month from 'order_date' in df, then plot monthly average 'weight'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['order_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['weight'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average weight')\nplt.show()"}
{"instruction": "Sort df by 'income' descending.", "output": "df = df.sort_values(by='income', ascending=False)"}
{"instruction": "Convert categorical column 'group' in sales_df to one-hot encoding.", "output": "sales_df_ohe = pd.get_dummies(sales_df, columns=['group'])\nprint(sales_df_ohe.head())"}
{"instruction": "Create a pivot table from data_raw with index 'class' and values 'sales'.", "output": "pivot = data_raw.pivot_table(index='class', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge dataset with df2 on 'salary' with inner join.", "output": "merged = dataset.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Group df1 by 'region' and calculate mean of 'weight'.", "output": "grouped = df1.groupby('region')['weight'].mean()\nprint(grouped)"}
{"instruction": "Sort sales_df by 'speed' descending.", "output": "sales_df = sales_df.sort_values(by='speed', ascending=False)"}
{"instruction": "Create a pivot table from data_raw with index 'group' and values 'score'.", "output": "pivot = data_raw.pivot_table(index='group', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in data_raw.", "output": "data_raw['score_rolling'] = data_raw['score'].rolling(window=5).mean()"}
{"instruction": "Count unique values in 'sales' of df_sales.", "output": "unique_count = df_sales['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'weight' in df to datetime format.", "output": "import pandas as pd\ndf['weight'] = pd.to_datetime(df['weight'])"}
{"instruction": "Convert 'age' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['age'] = pd.to_datetime(data_clean['age'])"}
{"instruction": "Count unique values in 'speed' of df2.", "output": "unique_count = df2['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'income' of df1 with the median.", "output": "df1['income'] = df1['income'].fillna(df1['income'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in dataset.", "output": "dataset['duration_rolling'] = dataset['duration'].rolling(window=5).mean()"}
{"instruction": "Convert 'price' in data_raw to datetime format.", "output": "import pandas as pd\ndata_raw['price'] = pd.to_datetime(data_raw['price'])"}
{"instruction": "Filter df2 for rows where 'weight' > 100.", "output": "df2_filtered = df2[df2['weight'] > 100]"}
{"instruction": "Filter sales_df for rows where 'value' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['value'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Merge df_data with df2 on 'height' with inner join.", "output": "merged = df_data.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Fill missing values in 'salary' of df1 with the median.", "output": "df1['salary'] = df1['salary'].fillna(df1['salary'].median())"}
{"instruction": "Perform time series resampling: sum 'age' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['sale_date'] = pd.to_datetime(data_clean['sale_date'])\nresampled = data_clean.set_index('sale_date').resample('M')['age'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'income' is null in df2.", "output": "df2 = df2.dropna(subset=['income'])"}
{"instruction": "Extract year and month from 'sale_date' in data_clean, then plot monthly average 'duration'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['sale_date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['duration'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average duration')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in data, then plot monthly average 'price'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['sale_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['price'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average price')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'count' monthly in dataset.", "output": "import pandas as pd\ndataset['sale_date'] = pd.to_datetime(dataset['sale_date'])\nresampled = dataset.set_index('sale_date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Rename column 'height' in df to 'new_height'.", "output": "df = df.rename(columns={'height': 'new_height'})"}
{"instruction": "Merge df with df2 on 'price' with inner join.", "output": "merged = df.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Filter df_data for rows where 'score' > 100.", "output": "df_data_filtered = df_data[df_data['score'] > 100]"}
{"instruction": "Count unique values in 'sales' of df_data.", "output": "unique_count = df_data['sales'].nunique()\nprint(unique_count)"}
{"instruction": "Find the top 3 rows in df_sales with highest 'income'.", "output": "top3 = df_sales.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Drop rows where 'quantity' is null in dataset.", "output": "dataset = dataset.dropna(subset=['quantity'])"}
{"instruction": "Convert categorical column 'status' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['status'])\nprint(data_ohe.head())"}
{"instruction": "Count unique values in 'salary' of df2.", "output": "unique_count = df2['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Group data_clean by 'group' and calculate mean of 'salary'.", "output": "grouped = data_clean.groupby('group')['salary'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in sales_df.", "output": "import pandas as pd\nsales_df['date'] = pd.to_datetime(sales_df['date'])\nresampled = sales_df.set_index('date').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Group df2 by 'status' and calculate mean of 'age'.", "output": "grouped = df2.groupby('status')['age'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'price' of dataset with the median.", "output": "dataset['price'] = dataset['price'].fillna(dataset['price'].median())"}
{"instruction": "Count unique values in 'revenue' of df1.", "output": "unique_count = df1['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Filter sales_df for rows where 'rating' > 100.", "output": "sales_df_filtered = sales_df[sales_df['rating'] > 100]"}
{"instruction": "Count unique values in 'income' of sales_df.", "output": "unique_count = sales_df['income'].nunique()\nprint(unique_count)"}
{"instruction": "Filter data for rows where 'salary' contains 'A'.", "output": "data_sub = data[data['salary'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Filter data for rows where 'speed' > 100.", "output": "data_filtered = data[data['speed'] > 100]"}
{"instruction": "Convert 'score' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['score'] = pd.to_datetime(df_sales['score'])"}
{"instruction": "Count unique values in 'age' of data_clean.", "output": "unique_count = data_clean['age'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'class' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='duration', data=df)\nplt.title('Boxplot of duration by class')\nplt.show()"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'group' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='speed', data=df_data)\nplt.title('Boxplot of speed by group')\nplt.show()"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'department' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='sales', data=data_raw)\nplt.title('Boxplot of sales by department')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in df_data, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['sale_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Sort data_clean by 'quantity' descending.", "output": "data_clean = data_clean.sort_values(by='quantity', ascending=False)"}
{"instruction": "Group sales_df by 'class' and calculate mean of 'height'.", "output": "grouped = sales_df.groupby('class')['height'].mean()\nprint(grouped)"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in data_clean.", "output": "data_clean['sales_rolling'] = data_clean['sales'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'income' monthly in df1.", "output": "import pandas as pd\ndf1['sale_date'] = pd.to_datetime(df1['sale_date'])\nresampled = df1.set_index('sale_date').resample('M')['income'].sum()\nprint(resampled)"}
{"instruction": "Create a pivot table from df_sales with index 'department' and values 'rating'.", "output": "pivot = df_sales.pivot_table(index='department', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'category' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='height', data=df_sales)\nplt.title('Boxplot of height by category')\nplt.show()"}
{"instruction": "Group df1 by 'type' and calculate mean of 'price'.", "output": "grouped = df1.groupby('type')['price'].mean()\nprint(grouped)"}
{"instruction": "Filter df1 for rows where 'quantity' contains 'A'.", "output": "df1_sub = df1[df1['quantity'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Merge dataset with df2 on 'score' with inner join.", "output": "merged = dataset.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Filter sales_df for rows where 'income' > 100.", "output": "sales_df_filtered = sales_df[sales_df['income'] > 100]"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in dataset.", "output": "import pandas as pd\ndataset['sale_date'] = pd.to_datetime(dataset['sale_date'])\nresampled = dataset.set_index('sale_date').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Find the top 3 rows in dataset with highest 'duration'.", "output": "top3 = dataset.nlargest(3, 'duration')\nprint(top3)"}
{"instruction": "Fill missing values in 'duration' of dataset with the median.", "output": "dataset['duration'] = dataset['duration'].fillna(dataset['duration'].median())"}
{"instruction": "Create a pivot table from df2 with index 'status' and values 'revenue'.", "output": "pivot = df2.pivot_table(index='status', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'date' in df_sales, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Rename column 'value' in dataset to 'new_value'.", "output": "dataset = dataset.rename(columns={'value': 'new_value'})"}
{"instruction": "Create a pivot table from data with index 'status' and values 'age'.", "output": "pivot = data.pivot_table(index='status', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df_data with highest 'revenue'.", "output": "top3 = df_data.nlargest(3, 'revenue')\nprint(top3)"}
{"instruction": "Fill missing values in 'quantity' of data with the median.", "output": "data['quantity'] = data['quantity'].fillna(data['quantity'].median())"}
{"instruction": "Plot value counts of 'status' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Count unique values in 'income' of data.", "output": "unique_count = data['income'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from dataset with index 'department' and values 'income'.", "output": "pivot = dataset.pivot_table(index='department', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'type' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='rating', data=sales_df)\nplt.title('Boxplot of rating by type')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in dataset, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['sale_date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Create a pivot table from df_data with index 'region' and values 'height'.", "output": "pivot = df_data.pivot_table(index='region', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from sales_df with index 'status' and values 'weight'.", "output": "pivot = sales_df.pivot_table(index='status', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df with index 'type' and values 'salary'.", "output": "pivot = df.pivot_table(index='type', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df_data with df2 on 'value' with inner join.", "output": "merged = df_data.merge(df2, on='value', how='inner')\nprint(merged.head())"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'city' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='quantity', data=dataset)\nplt.title('Boxplot of quantity by city')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in data_raw, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['timestamp']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'city' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='rating', data=df)\nplt.title('Boxplot of rating by city')\nplt.show()"}
{"instruction": "Convert 'sales' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['sales'] = pd.to_datetime(df_sales['sales'])"}
{"instruction": "Plot a boxplot of 'score' grouped by 'region' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='score', data=dataset)\nplt.title('Boxplot of score by region')\nplt.show()"}
{"instruction": "Filter data_clean for rows where 'value' > 100.", "output": "data_clean_filtered = data_clean[data_clean['value'] > 100]"}
{"instruction": "Convert 'count' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['count'] = pd.to_datetime(data_clean['count'])"}
{"instruction": "Count unique values in 'score' of df2.", "output": "unique_count = df2['score'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'department' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='revenue', data=sales_df)\nplt.title('Boxplot of revenue by department')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in dataset.", "output": "dataset['weight_rolling'] = dataset['weight'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in sales_df.", "output": "import pandas as pd\nsales_df['timestamp'] = pd.to_datetime(sales_df['timestamp'])\nresampled = sales_df.set_index('timestamp').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Convert 'rating' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['rating'] = pd.to_datetime(data_clean['rating'])"}
{"instruction": "Rename column 'income' in sales_df to 'new_income'.", "output": "sales_df = sales_df.rename(columns={'income': 'new_income'})"}
{"instruction": "Count unique values in 'price' of dataset.", "output": "unique_count = dataset['price'].nunique()\nprint(unique_count)"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in df1.", "output": "df1['rating_rolling'] = df1['rating'].rolling(window=5).mean()"}
{"instruction": "Sort df2 by 'speed' descending.", "output": "df2 = df2.sort_values(by='speed', ascending=False)"}
{"instruction": "Drop rows where 'price' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['price'])"}
{"instruction": "Sort df by 'sales' descending.", "output": "df = df.sort_values(by='sales', ascending=False)"}
{"instruction": "Extract year and month from 'order_date' in df1, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['order_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Create a pivot table from sales_df with index 'class' and values 'value'.", "output": "pivot = sales_df.pivot_table(index='class', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'date' in sales_df, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Filter df for rows where 'duration' > 100.", "output": "df_filtered = df[df['duration'] > 100]"}
{"instruction": "Drop rows where 'age' is null in df1.", "output": "df1 = df1.dropna(subset=['age'])"}
{"instruction": "Count unique values in 'duration' of df2.", "output": "unique_count = df2['duration'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from data with index 'category' and values 'price'.", "output": "pivot = data.pivot_table(index='category', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group sales_df by 'group' and calculate mean of 'quantity'.", "output": "grouped = sales_df.groupby('group')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from df1 with index 'group' and values 'price'.", "output": "pivot = df1.pivot_table(index='group', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'age' grouped by 'type' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='age', data=data_clean)\nplt.title('Boxplot of age by type')\nplt.show()"}
{"instruction": "Merge data_raw with df2 on 'count' with inner join.", "output": "merged = data_raw.merge(df2, on='count', how='inner')\nprint(merged.head())"}
{"instruction": "Rename column 'duration' in df2 to 'new_duration'.", "output": "df2 = df2.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Sort df_sales by 'count' descending.", "output": "df_sales = df_sales.sort_values(by='count', ascending=False)"}
{"instruction": "Plot value counts of 'category' in sales_df as a bar chart.", "output": "import matplotlib.pyplot as plt\nsales_df['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Fill missing values in 'weight' of df1 with the median.", "output": "df1['weight'] = df1['weight'].fillna(df1['weight'].median())"}
{"instruction": "Plot value counts of 'region' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['region'].value_counts().plot(kind='bar')\nplt.title('Value Counts of region')\nplt.show()"}
{"instruction": "Sort data_clean by 'age' descending.", "output": "data_clean = data_clean.sort_values(by='age', ascending=False)"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in df.", "output": "df['revenue_rolling'] = df['revenue'].rolling(window=5).mean()"}
{"instruction": "Filter df_sales for rows where 'revenue' > 100.", "output": "df_sales_filtered = df_sales[df_sales['revenue'] > 100]"}
{"instruction": "Fill missing values in 'age' of data_clean with the median.", "output": "data_clean['age'] = data_clean['age'].fillna(data_clean['age'].median())"}
{"instruction": "Extract year and month from 'date' in sales_df, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Plot value counts of 'department' in df_sales as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_sales['department'].value_counts().plot(kind='bar')\nplt.title('Value Counts of department')\nplt.show()"}
{"instruction": "Extract year and month from 'order_date' in dataset, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['order_date']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Convert 'count' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['count'] = pd.to_datetime(sales_df['count'])"}
{"instruction": "Convert categorical column 'group' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['group'])\nprint(data_ohe.head())"}
{"instruction": "Find the top 3 rows in df with highest 'duration'.", "output": "top3 = df.nlargest(3, 'duration')\nprint(top3)"}
{"instruction": "Fill missing values in 'count' of data_clean with the median.", "output": "data_clean['count'] = data_clean['count'].fillna(data_clean['count'].median())"}
{"instruction": "Plot a boxplot of 'age' grouped by 'region' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='age', data=data_raw)\nplt.title('Boxplot of age by region')\nplt.show()"}
{"instruction": "Plot a boxplot of 'price' grouped by 'category' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='price', data=df)\nplt.title('Boxplot of price by category')\nplt.show()"}
{"instruction": "Drop rows where 'duration' is null in df1.", "output": "df1 = df1.dropna(subset=['duration'])"}
{"instruction": "Create a pivot table from df1 with index 'city' and values 'value'.", "output": "pivot = df1.pivot_table(index='city', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Perform time series resampling: sum 'age' monthly in df_sales.", "output": "import pandas as pd\ndf_sales['sale_date'] = pd.to_datetime(df_sales['sale_date'])\nresampled = df_sales.set_index('sale_date').resample('M')['age'].sum()\nprint(resampled)"}
{"instruction": "Sort sales_df by 'sales' descending.", "output": "sales_df = sales_df.sort_values(by='sales', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'income' monthly in df.", "output": "import pandas as pd\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\nresampled = df.set_index('timestamp').resample('M')['income'].sum()\nprint(resampled)"}
{"instruction": "Filter df1 for rows where 'weight' contains 'A'.", "output": "df1_sub = df1[df1['weight'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Sort sales_df by 'weight' descending.", "output": "sales_df = sales_df.sort_values(by='weight', ascending=False)"}
{"instruction": "Filter df for rows where 'price' > 100.", "output": "df_filtered = df[df['price'] > 100]"}
{"instruction": "Filter df for rows where 'weight' > 100.", "output": "df_filtered = df[df['weight'] > 100]"}
{"instruction": "Filter df_sales for rows where 'height' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['height'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Drop rows where 'value' is null in df1.", "output": "df1 = df1.dropna(subset=['value'])"}
{"instruction": "Group sales_df by 'type' and calculate mean of 'quantity'.", "output": "grouped = sales_df.groupby('type')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from data_raw with index 'class' and values 'salary'.", "output": "pivot = data_raw.pivot_table(index='class', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df_data with highest 'score'.", "output": "top3 = df_data.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'age' in data.", "output": "data['age_rolling'] = data['age'].rolling(window=5).mean()"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'group' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='revenue', data=data)\nplt.title('Boxplot of revenue by group')\nplt.show()"}
{"instruction": "Create a pivot table from data_clean with index 'region' and values 'height'.", "output": "pivot = data_clean.pivot_table(index='region', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Rename column 'duration' in df_sales to 'new_duration'.", "output": "df_sales = df_sales.rename(columns={'duration': 'new_duration'})"}
{"instruction": "Perform time series resampling: sum 'speed' monthly in df_data.", "output": "import pandas as pd\ndf_data['date'] = pd.to_datetime(df_data['date'])\nresampled = df_data.set_index('date').resample('M')['speed'].sum()\nprint(resampled)"}
{"instruction": "Filter df1 for rows where 'sales' contains 'A'.", "output": "df1_sub = df1[df1['sales'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Create a pivot table from df_sales with index 'group' and values 'score'.", "output": "pivot = df_sales.pivot_table(index='group', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group sales_df by 'class' and calculate mean of 'weight'.", "output": "grouped = sales_df.groupby('class')['weight'].mean()\nprint(grouped)"}
{"instruction": "Count unique values in 'revenue' of df2.", "output": "unique_count = df2['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'department' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='height', data=data_clean)\nplt.title('Boxplot of height by department')\nplt.show()"}
{"instruction": "Filter data for rows where 'speed' contains 'A'.", "output": "data_sub = data[data['speed'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Convert categorical column 'department' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['department'])\nprint(df2_ohe.head())"}
{"instruction": "Extract year and month from 'timestamp' in sales_df, then plot monthly average 'duration'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['timestamp']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['duration'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average duration')\nplt.show()"}
{"instruction": "Plot a boxplot of 'value' grouped by 'class' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='value', data=df2)\nplt.title('Boxplot of value by class')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'salary' contains 'A'.", "output": "df2_sub = df2[df2['salary'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Filter data_raw for rows where 'salary' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['salary'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Plot a boxplot of 'height' grouped by 'type' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='height', data=data)\nplt.title('Boxplot of height by type')\nplt.show()"}
{"instruction": "Create a pivot table from df_sales with index 'group' and values 'weight'.", "output": "pivot = df_sales.pivot_table(index='group', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'weight' of df2.", "output": "unique_count = df2['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['timestamp'] = pd.to_datetime(data_clean['timestamp'])\nresampled = data_clean.set_index('timestamp').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in data_raw.", "output": "import pandas as pd\ndata_raw['timestamp'] = pd.to_datetime(data_raw['timestamp'])\nresampled = data_raw.set_index('timestamp').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in df2.", "output": "import pandas as pd\ndf2['date'] = pd.to_datetime(df2['date'])\nresampled = df2.set_index('date').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Perform time series resampling: sum 'count' monthly in df_data.", "output": "import pandas as pd\ndf_data['timestamp'] = pd.to_datetime(df_data['timestamp'])\nresampled = df_data.set_index('timestamp').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Count unique values in 'rating' of df_sales.", "output": "unique_count = df_sales['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'department' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='speed', data=df_sales)\nplt.title('Boxplot of speed by department')\nplt.show()"}
{"instruction": "Drop rows where 'rating' is null in data.", "output": "data = data.dropna(subset=['rating'])"}
{"instruction": "Create a pivot table from df_data with index 'group' and values 'sales'.", "output": "pivot = df_data.pivot_table(index='group', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df1 with df2 on 'income' with inner join.", "output": "merged = df1.merge(df2, on='income', how='inner')\nprint(merged.head())"}
{"instruction": "Create a pivot table from df2 with index 'type' and values 'age'.", "output": "pivot = df2.pivot_table(index='type', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort df2 by 'income' descending.", "output": "df2 = df2.sort_values(by='income', ascending=False)"}
{"instruction": "Drop rows where 'duration' is null in df_data.", "output": "df_data = df_data.dropna(subset=['duration'])"}
{"instruction": "Merge dataset with df2 on 'revenue' with inner join.", "output": "merged = dataset.merge(df2, on='revenue', how='inner')\nprint(merged.head())"}
{"instruction": "Count unique values in 'score' of data.", "output": "unique_count = data['score'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'rating' in df2 to datetime format.", "output": "import pandas as pd\ndf2['rating'] = pd.to_datetime(df2['rating'])"}
{"instruction": "Filter data_raw for rows where 'salary' > 100.", "output": "data_raw_filtered = data_raw[data_raw['salary'] > 100]"}
{"instruction": "Merge df2 with df2 on 'age' with inner join.", "output": "merged = df2.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Sort df by 'price' descending.", "output": "df = df.sort_values(by='price', ascending=False)"}
{"instruction": "Extract year and month from 'timestamp' in data, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['timestamp']).dt.to_period('M')\nmonthly = data.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'status' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='quantity', data=df)\nplt.title('Boxplot of quantity by status')\nplt.show()"}
{"instruction": "Group df1 by 'group' and calculate mean of 'quantity'.", "output": "grouped = df1.groupby('group')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Plot a boxplot of 'age' grouped by 'class' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='age', data=dataset)\nplt.title('Boxplot of age by class')\nplt.show()"}
{"instruction": "Fill missing values in 'value' of data_clean with the median.", "output": "data_clean['value'] = data_clean['value'].fillna(data_clean['value'].median())"}
{"instruction": "Filter data_raw for rows where 'weight' > 100.", "output": "data_raw_filtered = data_raw[data_raw['weight'] > 100]"}
{"instruction": "Rename column 'price' in df_sales to 'new_price'.", "output": "df_sales = df_sales.rename(columns={'price': 'new_price'})"}
{"instruction": "Count unique values in 'price' of df2.", "output": "unique_count = df2['price'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from df2 with index 'type' and values 'rating'.", "output": "pivot = df2.pivot_table(index='type', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Rename column 'weight' in df_sales to 'new_weight'.", "output": "df_sales = df_sales.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Count unique values in 'height' of data_raw.", "output": "unique_count = data_raw['height'].nunique()\nprint(unique_count)"}
{"instruction": "Group df_sales by 'type' and calculate mean of 'age'.", "output": "grouped = df_sales.groupby('type')['age'].mean()\nprint(grouped)"}
{"instruction": "Sort data by 'weight' descending.", "output": "data = data.sort_values(by='weight', ascending=False)"}
{"instruction": "Group dataset by 'type' and calculate mean of 'score'.", "output": "grouped = dataset.groupby('type')['score'].mean()\nprint(grouped)"}
{"instruction": "Filter df_data for rows where 'rating' > 100.", "output": "df_data_filtered = df_data[df_data['rating'] > 100]"}
{"instruction": "Compute a rolling average of window size 5 on 'income' in data_raw.", "output": "data_raw['income_rolling'] = data_raw['income'].rolling(window=5).mean()"}
{"instruction": "Convert categorical column 'region' in data to one-hot encoding.", "output": "data_ohe = pd.get_dummies(data, columns=['region'])\nprint(data_ohe.head())"}
{"instruction": "Convert categorical column 'status' in df to one-hot encoding.", "output": "df_ohe = pd.get_dummies(df, columns=['status'])\nprint(df_ohe.head())"}
{"instruction": "Find the top 3 rows in data_raw with highest 'rating'.", "output": "top3 = data_raw.nlargest(3, 'rating')\nprint(top3)"}
{"instruction": "Create a pivot table from sales_df with index 'category' and values 'age'.", "output": "pivot = sales_df.pivot_table(index='category', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'salary' grouped by 'region' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='salary', data=df2)\nplt.title('Boxplot of salary by region')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in dataset.", "output": "dataset['sales_rolling'] = dataset['sales'].rolling(window=5).mean()"}
{"instruction": "Perform time series resampling: sum 'value' monthly in data.", "output": "import pandas as pd\ndata['timestamp'] = pd.to_datetime(data['timestamp'])\nresampled = data.set_index('timestamp').resample('M')['value'].sum()\nprint(resampled)"}
{"instruction": "Filter dataset for rows where 'revenue' contains 'A'.", "output": "dataset_sub = dataset[dataset['revenue'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Drop rows where 'revenue' is null in df1.", "output": "df1 = df1.dropna(subset=['revenue'])"}
{"instruction": "Count unique values in 'revenue' of df.", "output": "unique_count = df['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Sort df_data by 'revenue' descending.", "output": "df_data = df_data.sort_values(by='revenue', ascending=False)"}
{"instruction": "Plot a boxplot of 'speed' grouped by 'type' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='speed', data=df_data)\nplt.title('Boxplot of speed by type')\nplt.show()"}
{"instruction": "Filter df2 for rows where 'weight' contains 'A'.", "output": "df2_sub = df2[df2['weight'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Perform time series resampling: sum 'height' monthly in data.", "output": "import pandas as pd\ndata['date'] = pd.to_datetime(data['date'])\nresampled = data.set_index('date').resample('M')['height'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in data.", "output": "data['weight_rolling'] = data['weight'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df_data with index 'category' and values 'rating'.", "output": "pivot = df_data.pivot_table(index='category', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'height' of df_data.", "output": "unique_count = df_data['height'].nunique()\nprint(unique_count)"}
{"instruction": "Plot value counts of 'city' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Group data_clean by 'city' and calculate mean of 'price'.", "output": "grouped = data_clean.groupby('city')['price'].mean()\nprint(grouped)"}
{"instruction": "Count unique values in 'height' of dataset.", "output": "unique_count = dataset['height'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'price' in df1 to 'new_price'.", "output": "df1 = df1.rename(columns={'price': 'new_price'})"}
{"instruction": "Rename column 'count' in data to 'new_count'.", "output": "data = data.rename(columns={'count': 'new_count'})"}
{"instruction": "Filter sales_df for rows where 'height' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['height'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Create a pivot table from data_clean with index 'city' and values 'speed'.", "output": "pivot = data_clean.pivot_table(index='city', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df_sales with index 'region' and values 'count'.", "output": "pivot = df_sales.pivot_table(index='region', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Fill missing values in 'rating' of df_data with the median.", "output": "df_data['rating'] = df_data['rating'].fillna(df_data['rating'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in df.", "output": "df['salary_rolling'] = df['salary'].rolling(window=5).mean()"}
{"instruction": "Filter dataset for rows where 'quantity' contains 'A'.", "output": "dataset_sub = dataset[dataset['quantity'].str.contains('A')]\nprint(dataset_sub.head())"}
{"instruction": "Group df_data by 'department' and calculate mean of 'weight'.", "output": "grouped = df_data.groupby('department')['weight'].mean()\nprint(grouped)"}
{"instruction": "Find the top 3 rows in df with highest 'speed'.", "output": "top3 = df.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in df.", "output": "df['sales_rolling'] = df['sales'].rolling(window=5).mean()"}
{"instruction": "Sort dataset by 'value' descending.", "output": "dataset = dataset.sort_values(by='value', ascending=False)"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'status' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='rating', data=data)\nplt.title('Boxplot of rating by status')\nplt.show()"}
{"instruction": "Merge df with df2 on 'rating' with inner join.", "output": "merged = df.merge(df2, on='rating', how='inner')\nprint(merged.head())"}
{"instruction": "Fill missing values in 'revenue' of df_sales with the median.", "output": "df_sales['revenue'] = df_sales['revenue'].fillna(df_sales['revenue'].median())"}
{"instruction": "Compute a rolling average of window size 5 on 'quantity' in data_clean.", "output": "data_clean['quantity_rolling'] = data_clean['quantity'].rolling(window=5).mean()"}
{"instruction": "Convert categorical column 'region' in dataset to one-hot encoding.", "output": "dataset_ohe = pd.get_dummies(dataset, columns=['region'])\nprint(dataset_ohe.head())"}
{"instruction": "Plot a boxplot of 'count' grouped by 'region' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='count', data=df_sales)\nplt.title('Boxplot of count by region')\nplt.show()"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in dataset.", "output": "import pandas as pd\ndataset['order_date'] = pd.to_datetime(dataset['order_date'])\nresampled = dataset.set_index('order_date').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Count unique values in 'income' of dataset.", "output": "unique_count = dataset['income'].nunique()\nprint(unique_count)"}
{"instruction": "Find the top 3 rows in dataset with highest 'price'.", "output": "top3 = dataset.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Filter df_sales for rows where 'age' > 100.", "output": "df_sales_filtered = df_sales[df_sales['age'] > 100]"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in df_data.", "output": "import pandas as pd\ndf_data['date'] = pd.to_datetime(df_data['date'])\nresampled = df_data.set_index('date').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Find the top 3 rows in df1 with highest 'weight'.", "output": "top3 = df1.nlargest(3, 'weight')\nprint(top3)"}
{"instruction": "Find the top 3 rows in df_data with highest 'sales'.", "output": "top3 = df_data.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Count unique values in 'weight' of sales_df.", "output": "unique_count = sales_df['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Compute a rolling average of window size 5 on 'revenue' in df_data.", "output": "df_data['revenue_rolling'] = df_data['revenue'].rolling(window=5).mean()"}
{"instruction": "Plot value counts of 'status' in data_clean as a bar chart.", "output": "import matplotlib.pyplot as plt\ndata_clean['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Merge data_clean with df2 on 'price' with inner join.", "output": "merged = data_clean.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Group data_raw by 'group' and calculate mean of 'speed'.", "output": "grouped = data_raw.groupby('group')['speed'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'quantity' monthly in df_data.", "output": "import pandas as pd\ndf_data['order_date'] = pd.to_datetime(df_data['order_date'])\nresampled = df_data.set_index('order_date').resample('M')['quantity'].sum()\nprint(resampled)"}
{"instruction": "Find the top 3 rows in df2 with highest 'count'.", "output": "top3 = df2.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Merge df2 with df2 on 'sales' with inner join.", "output": "merged = df2.merge(df2, on='sales', how='inner')\nprint(merged.head())"}
{"instruction": "Rename column 'salary' in data to 'new_salary'.", "output": "data = data.rename(columns={'salary': 'new_salary'})"}
{"instruction": "Count unique values in 'price' of df.", "output": "unique_count = df['price'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'price' in df2 to 'new_price'.", "output": "df2 = df2.rename(columns={'price': 'new_price'})"}
{"instruction": "Filter df_sales for rows where 'speed' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['speed'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'age' in df_data.", "output": "df_data['age_rolling'] = df_data['age'].rolling(window=5).mean()"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'city' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='revenue', data=data_clean)\nplt.title('Boxplot of revenue by city')\nplt.show()"}
{"instruction": "Plot a boxplot of 'score' grouped by 'category' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='score', data=df1)\nplt.title('Boxplot of score by category')\nplt.show()"}
{"instruction": "Create a pivot table from dataset with index 'category' and values 'salary'.", "output": "pivot = dataset.pivot_table(index='category', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from df_data with index 'status' and values 'salary'.", "output": "pivot = df_data.pivot_table(index='status', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Drop rows where 'duration' is null in data.", "output": "data = data.dropna(subset=['duration'])"}
{"instruction": "Sort df_data by 'price' descending.", "output": "df_data = df_data.sort_values(by='price', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'count' monthly in df2.", "output": "import pandas as pd\ndf2['order_date'] = pd.to_datetime(df2['order_date'])\nresampled = df2.set_index('order_date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'price' grouped by 'region' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='price', data=data_raw)\nplt.title('Boxplot of price by region')\nplt.show()"}
{"instruction": "Filter data_raw for rows where 'duration' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['duration'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Perform time series resampling: sum 'count' monthly in df.", "output": "import pandas as pd\ndf['date'] = pd.to_datetime(df['date'])\nresampled = df.set_index('date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Convert 'rating' in dataset to datetime format.", "output": "import pandas as pd\ndataset['rating'] = pd.to_datetime(dataset['rating'])"}
{"instruction": "Convert 'revenue' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['revenue'] = pd.to_datetime(data_clean['revenue'])"}
{"instruction": "Filter dataset for rows where 'price' > 100.", "output": "dataset_filtered = dataset[dataset['price'] > 100]"}
{"instruction": "Drop rows where 'revenue' is null in sales_df.", "output": "sales_df = sales_df.dropna(subset=['revenue'])"}
{"instruction": "Group df_data by 'type' and calculate mean of 'weight'.", "output": "grouped = df_data.groupby('type')['weight'].mean()\nprint(grouped)"}
{"instruction": "Filter df for rows where 'speed' contains 'A'.", "output": "df_sub = df[df['speed'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Extract year and month from 'timestamp' in dataset, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndataset['year_month'] = pd.to_datetime(dataset['timestamp']).dt.to_period('M')\nmonthly = dataset.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Fill missing values in 'revenue' of df_data with the median.", "output": "df_data['revenue'] = df_data['revenue'].fillna(df_data['revenue'].median())"}
{"instruction": "Perform time series resampling: sum 'salary' monthly in df1.", "output": "import pandas as pd\ndf1['sale_date'] = pd.to_datetime(df1['sale_date'])\nresampled = df1.set_index('sale_date').resample('M')['salary'].sum()\nprint(resampled)"}
{"instruction": "Create a pivot table from data_raw with index 'group' and values 'count'.", "output": "pivot = data_raw.pivot_table(index='group', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'timestamp' in data_clean, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['timestamp']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Rename column 'speed' in sales_df to 'new_speed'.", "output": "sales_df = sales_df.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Filter data_raw for rows where 'value' > 100.", "output": "data_raw_filtered = data_raw[data_raw['value'] > 100]"}
{"instruction": "Convert 'value' in dataset to datetime format.", "output": "import pandas as pd\ndataset['value'] = pd.to_datetime(dataset['value'])"}
{"instruction": "Rename column 'age' in dataset to 'new_age'.", "output": "dataset = dataset.rename(columns={'age': 'new_age'})"}
{"instruction": "Filter data_raw for rows where 'count' > 100.", "output": "data_raw_filtered = data_raw[data_raw['count'] > 100]"}
{"instruction": "Sort df_sales by 'weight' descending.", "output": "df_sales = df_sales.sort_values(by='weight', ascending=False)"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'category' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='duration', data=df_sales)\nplt.title('Boxplot of duration by category')\nplt.show()"}
{"instruction": "Count unique values in 'quantity' of sales_df.", "output": "unique_count = sales_df['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Count unique values in 'speed' of df_data.", "output": "unique_count = df_data['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from sales_df with index 'city' and values 'salary'.", "output": "pivot = sales_df.pivot_table(index='city', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge data_clean with df2 on 'age' with inner join.", "output": "merged = data_clean.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Plot a boxplot of 'age' grouped by 'city' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='age', data=sales_df)\nplt.title('Boxplot of age by city')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'score' in df2.", "output": "df2['score_rolling'] = df2['score'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in df with highest 'height'.", "output": "top3 = df.nlargest(3, 'height')\nprint(top3)"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'group' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='revenue', data=data_clean)\nplt.title('Boxplot of revenue by group')\nplt.show()"}
{"instruction": "Drop rows where 'height' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['height'])"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in data_clean.", "output": "data_clean['duration_rolling'] = data_clean['duration'].rolling(window=5).mean()"}
{"instruction": "Drop rows where 'rating' is null in df_data.", "output": "df_data = df_data.dropna(subset=['rating'])"}
{"instruction": "Fill missing values in 'score' of df_data with the median.", "output": "df_data['score'] = df_data['score'].fillna(df_data['score'].median())"}
{"instruction": "Filter dataset for rows where 'value' > 100.", "output": "dataset_filtered = dataset[dataset['value'] > 100]"}
{"instruction": "Count unique values in 'salary' of df_data.", "output": "unique_count = df_data['salary'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from dataset with index 'class' and values 'count'.", "output": "pivot = dataset.pivot_table(index='class', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_clean for rows where 'income' > 100.", "output": "data_clean_filtered = data_clean[data_clean['income'] > 100]"}
{"instruction": "Drop rows where 'height' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['height'])"}
{"instruction": "Compute a rolling average of window size 5 on 'quantity' in df2.", "output": "df2['quantity_rolling'] = df2['quantity'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'duration' of df_data with the median.", "output": "df_data['duration'] = df_data['duration'].fillna(df_data['duration'].median())"}
{"instruction": "Filter df1 for rows where 'quantity' > 100.", "output": "df1_filtered = df1[df1['quantity'] > 100]"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'region' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='revenue', data=df_sales)\nplt.title('Boxplot of revenue by region')\nplt.show()"}
{"instruction": "Create a pivot table from df1 with index 'region' and values 'quantity'.", "output": "pivot = df1.pivot_table(index='region', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Merge df_sales with df2 on 'height' with inner join.", "output": "merged = df_sales.merge(df2, on='height', how='inner')\nprint(merged.head())"}
{"instruction": "Convert 'count' in df to datetime format.", "output": "import pandas as pd\ndf['count'] = pd.to_datetime(df['count'])"}
{"instruction": "Compute a rolling average of window size 5 on 'count' in df.", "output": "df['count_rolling'] = df['count'].rolling(window=5).mean()"}
{"instruction": "Filter data_clean for rows where 'salary' > 100.", "output": "data_clean_filtered = data_clean[data_clean['salary'] > 100]"}
{"instruction": "Filter sales_df for rows where 'sales' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['sales'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Extract year and month from 'sale_date' in df_sales, then plot monthly average 'weight'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['sale_date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['weight'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average weight')\nplt.show()"}
{"instruction": "Create a pivot table from df_data with index 'group' and values 'income'.", "output": "pivot = df_data.pivot_table(index='group', values='income', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'sale_date' in data_raw, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['sale_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Rename column 'sales' in data_clean to 'new_sales'.", "output": "data_clean = data_clean.rename(columns={'sales': 'new_sales'})"}
{"instruction": "Rename column 'income' in data_raw to 'new_income'.", "output": "data_raw = data_raw.rename(columns={'income': 'new_income'})"}
{"instruction": "Extract year and month from 'order_date' in df, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['order_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Count unique values in 'value' of data_raw.", "output": "unique_count = data_raw['value'].nunique()\nprint(unique_count)"}
{"instruction": "Perform time series resampling: sum 'height' monthly in df_data.", "output": "import pandas as pd\ndf_data['timestamp'] = pd.to_datetime(df_data['timestamp'])\nresampled = df_data.set_index('timestamp').resample('M')['height'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'type' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='type', y='revenue', data=sales_df)\nplt.title('Boxplot of revenue by type')\nplt.show()"}
{"instruction": "Create a pivot table from df1 with index 'city' and values 'salary'.", "output": "pivot = df1.pivot_table(index='city', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Count unique values in 'score' of data_raw.", "output": "unique_count = data_raw['score'].nunique()\nprint(unique_count)"}
{"instruction": "Fill missing values in 'revenue' of data_raw with the median.", "output": "data_raw['revenue'] = data_raw['revenue'].fillna(data_raw['revenue'].median())"}
{"instruction": "Extract year and month from 'sale_date' in data_clean, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['sale_date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Group df by 'type' and calculate mean of 'score'.", "output": "grouped = df.groupby('type')['score'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'order_date' in data, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['order_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'sales' in sales_df.", "output": "sales_df['sales_rolling'] = sales_df['sales'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'order_date' in df_sales, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['order_date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Plot value counts of 'category' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Plot value counts of 'status' in df_data as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf_data['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Sort data by 'speed' descending.", "output": "data = data.sort_values(by='speed', ascending=False)"}
{"instruction": "Group df by 'department' and calculate mean of 'price'.", "output": "grouped = df.groupby('department')['price'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'order_date' in df2, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['order_date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Group df_sales by 'region' and calculate mean of 'height'.", "output": "grouped = df_sales.groupby('region')['height'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'income' of df_sales with the median.", "output": "df_sales['income'] = df_sales['income'].fillna(df_sales['income'].median())"}
{"instruction": "Convert 'value' in df2 to datetime format.", "output": "import pandas as pd\ndf2['value'] = pd.to_datetime(df2['value'])"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in df2.", "output": "df2['value_rolling'] = df2['value'].rolling(window=5).mean()"}
{"instruction": "Find the top 3 rows in data with highest 'income'.", "output": "top3 = data.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Filter data for rows where 'sales' contains 'A'.", "output": "data_sub = data[data['sales'].str.contains('A')]\nprint(data_sub.head())"}
{"instruction": "Extract year and month from 'order_date' in df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['order_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Drop rows where 'salary' is null in df.", "output": "df = df.dropna(subset=['salary'])"}
{"instruction": "Sort df_data by 'speed' descending.", "output": "df_data = df_data.sort_values(by='speed', ascending=False)"}
{"instruction": "Rename column 'quantity' in df to 'new_quantity'.", "output": "df = df.rename(columns={'quantity': 'new_quantity'})"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in df2.", "output": "df2['rating_rolling'] = df2['rating'].rolling(window=5).mean()"}
{"instruction": "Filter data_raw for rows where 'height' contains 'A'.", "output": "data_raw_sub = data_raw[data_raw['height'].str.contains('A')]\nprint(data_raw_sub.head())"}
{"instruction": "Sort data_raw by 'speed' descending.", "output": "data_raw = data_raw.sort_values(by='speed', ascending=False)"}
{"instruction": "Count unique values in 'count' of df_sales.", "output": "unique_count = df_sales['count'].nunique()\nprint(unique_count)"}
{"instruction": "Extract year and month from 'sale_date' in df_data, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['sale_date']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Find the top 3 rows in df2 with highest 'quantity'.", "output": "top3 = df2.nlargest(3, 'quantity')\nprint(top3)"}
{"instruction": "Count unique values in 'duration' of dataset.", "output": "unique_count = dataset['duration'].nunique()\nprint(unique_count)"}
{"instruction": "Sort dataset by 'quantity' descending.", "output": "dataset = dataset.sort_values(by='quantity', ascending=False)"}
{"instruction": "Create a pivot table from df1 with index 'status' and values 'salary'.", "output": "pivot = df1.pivot_table(index='status', values='salary', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'timestamp' in df_sales, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['timestamp']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Count unique values in 'age' of dataset.", "output": "unique_count = dataset['age'].nunique()\nprint(unique_count)"}
{"instruction": "Merge data with df2 on 'revenue' with inner join.", "output": "merged = data.merge(df2, on='revenue', how='inner')\nprint(merged.head())"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'region' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='revenue', data=data)\nplt.title('Boxplot of revenue by region')\nplt.show()"}
{"instruction": "Merge data_clean with df2 on 'duration' with inner join.", "output": "merged = data_clean.merge(df2, on='duration', how='inner')\nprint(merged.head())"}
{"instruction": "Sort data_clean by 'count' descending.", "output": "data_clean = data_clean.sort_values(by='count', ascending=False)"}
{"instruction": "Count unique values in 'quantity' of data.", "output": "unique_count = data['quantity'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'rating' in df1 to 'new_rating'.", "output": "df1 = df1.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Fill missing values in 'height' of df_sales with the median.", "output": "df_sales['height'] = df_sales['height'].fillna(df_sales['height'].median())"}
{"instruction": "Filter df for rows where 'height' contains 'A'.", "output": "df_sub = df[df['height'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Fill missing values in 'weight' of dataset with the median.", "output": "dataset['weight'] = dataset['weight'].fillna(dataset['weight'].median())"}
{"instruction": "Count unique values in 'revenue' of data.", "output": "unique_count = data['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Drop rows where 'sales' is null in df_sales.", "output": "df_sales = df_sales.dropna(subset=['sales'])"}
{"instruction": "Count unique values in 'revenue' of dataset.", "output": "unique_count = dataset['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'quantity' grouped by 'category' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='quantity', data=dataset)\nplt.title('Boxplot of quantity by category')\nplt.show()"}
{"instruction": "Create a pivot table from data_clean with index 'city' and values 'quantity'.", "output": "pivot = data_clean.pivot_table(index='city', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'sale_date' in df, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['sale_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Convert 'income' in sales_df to datetime format.", "output": "import pandas as pd\nsales_df['income'] = pd.to_datetime(sales_df['income'])"}
{"instruction": "Extract year and month from 'date' in df2, then plot monthly average 'rating'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['rating'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average rating')\nplt.show()"}
{"instruction": "Merge sales_df with df2 on 'price' with inner join.", "output": "merged = sales_df.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in data with highest 'price'.", "output": "top3 = data.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Create a pivot table from data_raw with index 'type' and values 'speed'.", "output": "pivot = data_raw.pivot_table(index='type', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group data_clean by 'group' and calculate mean of 'quantity'.", "output": "grouped = data_clean.groupby('group')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Filter df1 for rows where 'revenue' > 100.", "output": "df1_filtered = df1[df1['revenue'] > 100]"}
{"instruction": "Drop rows where 'score' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['score'])"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in df.", "output": "df['rating_rolling'] = df['rating'].rolling(window=5).mean()"}
{"instruction": "Convert 'height' in dataset to datetime format.", "output": "import pandas as pd\ndataset['height'] = pd.to_datetime(dataset['height'])"}
{"instruction": "Group df by 'class' and calculate mean of 'revenue'.", "output": "grouped = df.groupby('class')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'weight' monthly in sales_df.", "output": "import pandas as pd\nsales_df['date'] = pd.to_datetime(sales_df['date'])\nresampled = sales_df.set_index('date').resample('M')['weight'].sum()\nprint(resampled)"}
{"instruction": "Filter dataset for rows where 'height' > 100.", "output": "dataset_filtered = dataset[dataset['height'] > 100]"}
{"instruction": "Perform time series resampling: sum 'age' monthly in df1.", "output": "import pandas as pd\ndf1['date'] = pd.to_datetime(df1['date'])\nresampled = df1.set_index('date').resample('M')['age'].sum()\nprint(resampled)"}
{"instruction": "Sort df_data by 'quantity' descending.", "output": "df_data = df_data.sort_values(by='quantity', ascending=False)"}
{"instruction": "Plot a boxplot of 'value' grouped by 'department' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='value', data=df)\nplt.title('Boxplot of value by department')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in df_data, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_data['year_month'] = pd.to_datetime(df_data['timestamp']).dt.to_period('M')\nmonthly = df_data.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Group sales_df by 'type' and calculate mean of 'salary'.", "output": "grouped = sales_df.groupby('type')['salary'].mean()\nprint(grouped)"}
{"instruction": "Filter df for rows where 'count' > 100.", "output": "df_filtered = df[df['count'] > 100]"}
{"instruction": "Count unique values in 'rating' of data_raw.", "output": "unique_count = data_raw['rating'].nunique()\nprint(unique_count)"}
{"instruction": "Group df_sales by 'city' and calculate mean of 'revenue'.", "output": "grouped = df_sales.groupby('city')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'date' in data_raw, then plot monthly average 'count'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['count'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average count')\nplt.show()"}
{"instruction": "Convert 'price' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['price'] = pd.to_datetime(data_clean['price'])"}
{"instruction": "Drop rows where 'duration' is null in dataset.", "output": "dataset = dataset.dropna(subset=['duration'])"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['order_date'] = pd.to_datetime(data_clean['order_date'])\nresampled = data_clean.set_index('order_date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in df_sales.", "output": "df_sales['salary_rolling'] = df_sales['salary'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'income' of df2 with the median.", "output": "df2['income'] = df2['income'].fillna(df2['income'].median())"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'status' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='status', y='revenue', data=df_sales)\nplt.title('Boxplot of revenue by status')\nplt.show()"}
{"instruction": "Rename column 'value' in df_data to 'new_value'.", "output": "df_data = df_data.rename(columns={'value': 'new_value'})"}
{"instruction": "Group sales_df by 'group' and calculate mean of 'salary'.", "output": "grouped = sales_df.groupby('group')['salary'].mean()\nprint(grouped)"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'group' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='sales', data=data_clean)\nplt.title('Boxplot of sales by group')\nplt.show()"}
{"instruction": "Rename column 'rating' in data_raw to 'new_rating'.", "output": "data_raw = data_raw.rename(columns={'rating': 'new_rating'})"}
{"instruction": "Filter sales_df for rows where 'score' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['score'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Perform time series resampling: sum 'salary' monthly in df_data.", "output": "import pandas as pd\ndf_data['order_date'] = pd.to_datetime(df_data['order_date'])\nresampled = df_data.set_index('order_date').resample('M')['salary'].sum()\nprint(resampled)"}
{"instruction": "Plot a boxplot of 'price' grouped by 'city' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='price', data=sales_df)\nplt.title('Boxplot of price by city')\nplt.show()"}
{"instruction": "Group sales_df by 'region' and calculate mean of 'value'.", "output": "grouped = sales_df.groupby('region')['value'].mean()\nprint(grouped)"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'region' in data_clean.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='sales', data=data_clean)\nplt.title('Boxplot of sales by region')\nplt.show()"}
{"instruction": "Extract year and month from 'order_date' in sales_df, then plot monthly average 'score'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['order_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['score'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average score')\nplt.show()"}
{"instruction": "Convert categorical column 'category' in df2 to one-hot encoding.", "output": "df2_ohe = pd.get_dummies(df2, columns=['category'])\nprint(df2_ohe.head())"}
{"instruction": "Sort data by 'value' descending.", "output": "data = data.sort_values(by='value', ascending=False)"}
{"instruction": "Plot value counts of 'group' in df2 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf2['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Filter sales_df for rows where 'revenue' contains 'A'.", "output": "sales_df_sub = sales_df[sales_df['revenue'].str.contains('A')]\nprint(sales_df_sub.head())"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in df_sales.", "output": "df_sales['value_rolling'] = df_sales['value'].rolling(window=5).mean()"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in df_sales.", "output": "df_sales['weight_rolling'] = df_sales['weight'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df1 with index 'class' and values 'duration'.", "output": "pivot = df1.pivot_table(index='class', values='duration', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df_sales with highest 'sales'.", "output": "top3 = df_sales.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Extract year and month from 'order_date' in df, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['order_date']).dt.to_period('M')\nmonthly = df.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Find the top 3 rows in dataset with highest 'count'.", "output": "top3 = dataset.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Merge data with df2 on 'price' with inner join.", "output": "merged = data.merge(df2, on='price', how='inner')\nprint(merged.head())"}
{"instruction": "Group df by 'status' and calculate mean of 'value'.", "output": "grouped = df.groupby('status')['value'].mean()\nprint(grouped)"}
{"instruction": "Filter df_sales for rows where 'speed' > 100.", "output": "df_sales_filtered = df_sales[df_sales['speed'] > 100]"}
{"instruction": "Create a pivot table from data_clean with index 'class' and values 'speed'.", "output": "pivot = data_clean.pivot_table(index='class', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from dataset with index 'department' and values 'price'.", "output": "pivot = dataset.pivot_table(index='department', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df1 for rows where 'speed' > 100.", "output": "df1_filtered = df1[df1['speed'] > 100]"}
{"instruction": "Drop rows where 'height' is null in data_raw.", "output": "data_raw = data_raw.dropna(subset=['height'])"}
{"instruction": "Plot a boxplot of 'value' grouped by 'category' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='value', data=df1)\nplt.title('Boxplot of value by category')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in df1, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf1['year_month'] = pd.to_datetime(df1['sale_date']).dt.to_period('M')\nmonthly = df1.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Group sales_df by 'status' and calculate mean of 'weight'.", "output": "grouped = sales_df.groupby('status')['weight'].mean()\nprint(grouped)"}
{"instruction": "Compute a rolling average of window size 5 on 'rating' in df_data.", "output": "df_data['rating_rolling'] = df_data['rating'].rolling(window=5).mean()"}
{"instruction": "Filter df1 for rows where 'revenue' contains 'A'.", "output": "df1_sub = df1[df1['revenue'].str.contains('A')]\nprint(df1_sub.head())"}
{"instruction": "Fill missing values in 'sales' of dataset with the median.", "output": "dataset['sales'] = dataset['sales'].fillna(dataset['sales'].median())"}
{"instruction": "Group df by 'category' and calculate mean of 'age'.", "output": "grouped = df.groupby('category')['age'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'income' in df2 to 'new_income'.", "output": "df2 = df2.rename(columns={'income': 'new_income'})"}
{"instruction": "Find the top 3 rows in df_data with highest 'count'.", "output": "top3 = df_data.nlargest(3, 'count')\nprint(top3)"}
{"instruction": "Plot a boxplot of 'income' grouped by 'group' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='income', data=df_sales)\nplt.title('Boxplot of income by group')\nplt.show()"}
{"instruction": "Filter df_data for rows where 'weight' > 100.", "output": "df_data_filtered = df_data[df_data['weight'] > 100]"}
{"instruction": "Convert 'salary' in dataset to datetime format.", "output": "import pandas as pd\ndataset['salary'] = pd.to_datetime(dataset['salary'])"}
{"instruction": "Sort data_raw by 'sales' descending.", "output": "data_raw = data_raw.sort_values(by='sales', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'rating' monthly in sales_df.", "output": "import pandas as pd\nsales_df['order_date'] = pd.to_datetime(sales_df['order_date'])\nresampled = sales_df.set_index('order_date').resample('M')['rating'].sum()\nprint(resampled)"}
{"instruction": "Rename column 'height' in df_sales to 'new_height'.", "output": "df_sales = df_sales.rename(columns={'height': 'new_height'})"}
{"instruction": "Find the top 3 rows in dataset with highest 'income'.", "output": "top3 = dataset.nlargest(3, 'income')\nprint(top3)"}
{"instruction": "Create a pivot table from data_clean with index 'class' and values 'weight'.", "output": "pivot = data_clean.pivot_table(index='class', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Rename column 'score' in dataset to 'new_score'.", "output": "dataset = dataset.rename(columns={'score': 'new_score'})"}
{"instruction": "Fill missing values in 'salary' of data_raw with the median.", "output": "data_raw['salary'] = data_raw['salary'].fillna(data_raw['salary'].median())"}
{"instruction": "Sort df_sales by 'price' descending.", "output": "df_sales = df_sales.sort_values(by='price', ascending=False)"}
{"instruction": "Extract year and month from 'sale_date' in sales_df, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['sale_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Plot a boxplot of 'count' grouped by 'city' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='count', data=dataset)\nplt.title('Boxplot of count by city')\nplt.show()"}
{"instruction": "Merge data with df2 on 'score' with inner join.", "output": "merged = data.merge(df2, on='score', how='inner')\nprint(merged.head())"}
{"instruction": "Create a pivot table from data_raw with index 'type' and values 'weight'.", "output": "pivot = data_raw.pivot_table(index='type', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'date' in df_sales, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf_sales['year_month'] = pd.to_datetime(df_sales['date']).dt.to_period('M')\nmonthly = df_sales.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Rename column 'salary' in df1 to 'new_salary'.", "output": "df1 = df1.rename(columns={'salary': 'new_salary'})"}
{"instruction": "Merge df_data with df2 on 'age' with inner join.", "output": "merged = df_data.merge(df2, on='age', how='inner')\nprint(merged.head())"}
{"instruction": "Create a pivot table from df_sales with index 'group' and values 'count'.", "output": "pivot = df_sales.pivot_table(index='group', values='count', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'height' grouped by 'city' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='height', data=data)\nplt.title('Boxplot of height by city')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'value' in dataset.", "output": "dataset['value_rolling'] = dataset['value'].rolling(window=5).mean()"}
{"instruction": "Create a pivot table from df with index 'department' and values 'revenue'.", "output": "pivot = df.pivot_table(index='department', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Sort data_clean by 'sales' descending.", "output": "data_clean = data_clean.sort_values(by='sales', ascending=False)"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'group' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='rating', data=sales_df)\nplt.title('Boxplot of rating by group')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in df2, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['sale_date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Fill missing values in 'duration' of sales_df with the median.", "output": "sales_df['duration'] = sales_df['duration'].fillna(sales_df['duration'].median())"}
{"instruction": "Perform time series resampling: sum 'sales' monthly in data.", "output": "import pandas as pd\ndata['date'] = pd.to_datetime(data['date'])\nresampled = data.set_index('date').resample('M')['sales'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'sales' is null in df2.", "output": "df2 = df2.dropna(subset=['sales'])"}
{"instruction": "Plot a boxplot of 'rating' grouped by 'class' in df2.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='rating', data=df2)\nplt.title('Boxplot of rating by class')\nplt.show()"}
{"instruction": "Group dataset by 'category' and calculate mean of 'speed'.", "output": "grouped = dataset.groupby('category')['speed'].mean()\nprint(grouped)"}
{"instruction": "Sort df_sales by 'rating' descending.", "output": "df_sales = df_sales.sort_values(by='rating', ascending=False)"}
{"instruction": "Create a pivot table from df2 with index 'status' and values 'rating'.", "output": "pivot = df2.pivot_table(index='status', values='rating', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df_sales for rows where 'price' > 100.", "output": "df_sales_filtered = df_sales[df_sales['price'] > 100]"}
{"instruction": "Compute a rolling average of window size 5 on 'age' in data_clean.", "output": "data_clean['age_rolling'] = data_clean['age'].rolling(window=5).mean()"}
{"instruction": "Group data by 'group' and calculate mean of 'revenue'.", "output": "grouped = data.groupby('group')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Drop rows where 'revenue' is null in dataset.", "output": "dataset = dataset.dropna(subset=['revenue'])"}
{"instruction": "Fill missing values in 'weight' of df2 with the median.", "output": "df2['weight'] = df2['weight'].fillna(df2['weight'].median())"}
{"instruction": "Create a pivot table from data_raw with index 'region' and values 'score'.", "output": "pivot = data_raw.pivot_table(index='region', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Plot a boxplot of 'value' grouped by 'category' in df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='value', data=df)\nplt.title('Boxplot of value by category')\nplt.show()"}
{"instruction": "Plot a boxplot of 'revenue' grouped by 'department' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='department', y='revenue', data=data)\nplt.title('Boxplot of revenue by department')\nplt.show()"}
{"instruction": "Sort data_clean by 'score' descending.", "output": "data_clean = data_clean.sort_values(by='score', ascending=False)"}
{"instruction": "Rename column 'score' in df1 to 'new_score'.", "output": "df1 = df1.rename(columns={'score': 'new_score'})"}
{"instruction": "Find the top 3 rows in df with highest 'price'.", "output": "top3 = df.nlargest(3, 'price')\nprint(top3)"}
{"instruction": "Rename column 'height' in df1 to 'new_height'.", "output": "df1 = df1.rename(columns={'height': 'new_height'})"}
{"instruction": "Extract year and month from 'order_date' in data, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['order_date']).dt.to_period('M')\nmonthly = data.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Plot value counts of 'type' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['type'].value_counts().plot(kind='bar')\nplt.title('Value Counts of type')\nplt.show()"}
{"instruction": "Count unique values in 'value' of data.", "output": "unique_count = data['value'].nunique()\nprint(unique_count)"}
{"instruction": "Sort sales_df by 'height' descending.", "output": "sales_df = sales_df.sort_values(by='height', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'count' monthly in data_clean.", "output": "import pandas as pd\ndata_clean['date'] = pd.to_datetime(data_clean['date'])\nresampled = data_clean.set_index('date').resample('M')['count'].sum()\nprint(resampled)"}
{"instruction": "Sort df by 'revenue' descending.", "output": "df = df.sort_values(by='revenue', ascending=False)"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in dataset.", "output": "dataset['salary_rolling'] = dataset['salary'].rolling(window=5).mean()"}
{"instruction": "Extract year and month from 'date' in df2, then plot monthly average 'salary'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['salary'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average salary')\nplt.show()"}
{"instruction": "Find the top 3 rows in dataset with highest 'value'.", "output": "top3 = dataset.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Filter df_sales for rows where 'duration' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['duration'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Plot a boxplot of 'value' grouped by 'group' in dataset.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='value', data=dataset)\nplt.title('Boxplot of value by group')\nplt.show()"}
{"instruction": "Count unique values in 'revenue' of df_data.", "output": "unique_count = df_data['revenue'].nunique()\nprint(unique_count)"}
{"instruction": "Rename column 'weight' in df_data to 'new_weight'.", "output": "df_data = df_data.rename(columns={'weight': 'new_weight'})"}
{"instruction": "Filter df_sales for rows where 'quantity' > 100.", "output": "df_sales_filtered = df_sales[df_sales['quantity'] > 100]"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'class' in df_data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='duration', data=df_data)\nplt.title('Boxplot of duration by class')\nplt.show()"}
{"instruction": "Find the top 3 rows in df1 with highest 'sales'.", "output": "top3 = df1.nlargest(3, 'sales')\nprint(top3)"}
{"instruction": "Drop rows where 'revenue' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['revenue'])"}
{"instruction": "Filter df_data for rows where 'weight' contains 'A'.", "output": "df_data_sub = df_data[df_data['weight'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Group df_sales by 'type' and calculate mean of 'salary'.", "output": "grouped = df_sales.groupby('type')['salary'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'count' in data_raw to 'new_count'.", "output": "data_raw = data_raw.rename(columns={'count': 'new_count'})"}
{"instruction": "Rename column 'price' in data to 'new_price'.", "output": "data = data.rename(columns={'price': 'new_price'})"}
{"instruction": "Plot a boxplot of 'sales' grouped by 'city' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='sales', data=df_sales)\nplt.title('Boxplot of sales by city')\nplt.show()"}
{"instruction": "Convert 'weight' in data_clean to datetime format.", "output": "import pandas as pd\ndata_clean['weight'] = pd.to_datetime(data_clean['weight'])"}
{"instruction": "Count unique values in 'weight' of df_sales.", "output": "unique_count = df_sales['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Plot a boxplot of 'income' grouped by 'city' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='city', y='income', data=sales_df)\nplt.title('Boxplot of income by city')\nplt.show()"}
{"instruction": "Count unique values in 'weight' of data_clean.", "output": "unique_count = data_clean['weight'].nunique()\nprint(unique_count)"}
{"instruction": "Filter df2 for rows where 'height' contains 'A'.", "output": "df2_sub = df2[df2['height'].str.contains('A')]\nprint(df2_sub.head())"}
{"instruction": "Extract year and month from 'timestamp' in data, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata['year_month'] = pd.to_datetime(data['timestamp']).dt.to_period('M')\nmonthly = data.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Merge data with df2 on 'salary' with inner join.", "output": "merged = data.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in dataset with highest 'score'.", "output": "top3 = dataset.nlargest(3, 'score')\nprint(top3)"}
{"instruction": "Compute a rolling average of window size 5 on 'duration' in df2.", "output": "df2['duration_rolling'] = df2['duration'].rolling(window=5).mean()"}
{"instruction": "Sort df1 by 'price' descending.", "output": "df1 = df1.sort_values(by='price', ascending=False)"}
{"instruction": "Rename column 'score' in sales_df to 'new_score'.", "output": "sales_df = sales_df.rename(columns={'score': 'new_score'})"}
{"instruction": "Merge df2 with df2 on 'salary' with inner join.", "output": "merged = df2.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Filter df_sales for rows where 'score' contains 'A'.", "output": "df_sales_sub = df_sales[df_sales['score'].str.contains('A')]\nprint(df_sales_sub.head())"}
{"instruction": "Merge sales_df with df2 on 'sales' with inner join.", "output": "merged = sales_df.merge(df2, on='sales', how='inner')\nprint(merged.head())"}
{"instruction": "Plot a boxplot of 'count' grouped by 'class' in df_sales.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='count', data=df_sales)\nplt.title('Boxplot of count by class')\nplt.show()"}
{"instruction": "Plot value counts of 'city' in df1 as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf1['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Plot value counts of 'group' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['group'].value_counts().plot(kind='bar')\nplt.title('Value Counts of group')\nplt.show()"}
{"instruction": "Plot a boxplot of 'price' grouped by 'group' in data_raw.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='group', y='price', data=data_raw)\nplt.title('Boxplot of price by group')\nplt.show()"}
{"instruction": "Plot value counts of 'category' in dataset as a bar chart.", "output": "import matplotlib.pyplot as plt\ndataset['category'].value_counts().plot(kind='bar')\nplt.title('Value Counts of category')\nplt.show()"}
{"instruction": "Find the top 3 rows in data with highest 'salary'.", "output": "top3 = data.nlargest(3, 'salary')\nprint(top3)"}
{"instruction": "Create a pivot table from sales_df with index 'department' and values 'height'.", "output": "pivot = sales_df.pivot_table(index='department', values='height', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Create a pivot table from sales_df with index 'department' and values 'age'.", "output": "pivot = sales_df.pivot_table(index='department', values='age', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group df2 by 'type' and calculate mean of 'revenue'.", "output": "grouped = df2.groupby('type')['revenue'].mean()\nprint(grouped)"}
{"instruction": "Extract year and month from 'date' in data_clean, then plot monthly average 'sales'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['sales'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average sales')\nplt.show()"}
{"instruction": "Fill missing values in 'duration' of data_clean with the median.", "output": "data_clean['duration'] = data_clean['duration'].fillna(data_clean['duration'].median())"}
{"instruction": "Extract year and month from 'order_date' in sales_df, then plot monthly average 'speed'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['order_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['speed'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average speed')\nplt.show()"}
{"instruction": "Rename column 'speed' in data_raw to 'new_speed'.", "output": "data_raw = data_raw.rename(columns={'speed': 'new_speed'})"}
{"instruction": "Sort data_raw by 'score' descending.", "output": "data_raw = data_raw.sort_values(by='score', ascending=False)"}
{"instruction": "Sort data_raw by 'height' descending.", "output": "data_raw = data_raw.sort_values(by='height', ascending=False)"}
{"instruction": "Create a pivot table from df1 with index 'category' and values 'value'.", "output": "pivot = df1.pivot_table(index='category', values='value', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group df2 by 'type' and calculate mean of 'sales'.", "output": "grouped = df2.groupby('type')['sales'].mean()\nprint(grouped)"}
{"instruction": "Plot a boxplot of 'value' grouped by 'class' in df1.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='class', y='value', data=df1)\nplt.title('Boxplot of value by class')\nplt.show()"}
{"instruction": "Compute a rolling average of window size 5 on 'salary' in df1.", "output": "df1['salary_rolling'] = df1['salary'].rolling(window=5).mean()"}
{"instruction": "Fill missing values in 'salary' of df_sales with the median.", "output": "df_sales['salary'] = df_sales['salary'].fillna(df_sales['salary'].median())"}
{"instruction": "Group df1 by 'type' and calculate mean of 'salary'.", "output": "grouped = df1.groupby('type')['salary'].mean()\nprint(grouped)"}
{"instruction": "Filter sales_df for rows where 'quantity' > 100.", "output": "sales_df_filtered = sales_df[sales_df['quantity'] > 100]"}
{"instruction": "Convert categorical column 'status' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['status'])\nprint(data_raw_ohe.head())"}
{"instruction": "Merge dataset with df2 on 'weight' with inner join.", "output": "merged = dataset.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Filter df_data for rows where 'quantity' contains 'A'.", "output": "df_data_sub = df_data[df_data['quantity'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Filter data_clean for rows where 'score' > 100.", "output": "data_clean_filtered = data_clean[data_clean['score'] > 100]"}
{"instruction": "Plot value counts of 'city' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['city'].value_counts().plot(kind='bar')\nplt.title('Value Counts of city')\nplt.show()"}
{"instruction": "Filter sales_df for rows where 'sales' > 100.", "output": "sales_df_filtered = sales_df[sales_df['sales'] > 100]"}
{"instruction": "Convert 'revenue' in df_sales to datetime format.", "output": "import pandas as pd\ndf_sales['revenue'] = pd.to_datetime(df_sales['revenue'])"}
{"instruction": "Create a pivot table from df_data with index 'region' and values 'weight'.", "output": "pivot = df_data.pivot_table(index='region', values='weight', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df1 with highest 'height'.", "output": "top3 = df1.nlargest(3, 'height')\nprint(top3)"}
{"instruction": "Extract year and month from 'timestamp' in df, then plot monthly average 'income'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf['year_month'] = pd.to_datetime(df['timestamp']).dt.to_period('M')\nmonthly = df.groupby('year_month')['income'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average income')\nplt.show()"}
{"instruction": "Filter df for rows where 'score' > 100.", "output": "df_filtered = df[df['score'] > 100]"}
{"instruction": "Merge data_clean with df2 on 'salary' with inner join.", "output": "merged = data_clean.merge(df2, on='salary', how='inner')\nprint(merged.head())"}
{"instruction": "Plot a boxplot of 'duration' grouped by 'category' in data.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='category', y='duration', data=data)\nplt.title('Boxplot of duration by category')\nplt.show()"}
{"instruction": "Extract year and month from 'date' in df2, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf2['year_month'] = pd.to_datetime(df2['date']).dt.to_period('M')\nmonthly = df2.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Merge data with df2 on 'weight' with inner join.", "output": "merged = data.merge(df2, on='weight', how='inner')\nprint(merged.head())"}
{"instruction": "Find the top 3 rows in df_data with highest 'age'.", "output": "top3 = df_data.nlargest(3, 'age')\nprint(top3)"}
{"instruction": "Filter df_data for rows where 'price' contains 'A'.", "output": "df_data_sub = df_data[df_data['price'].str.contains('A')]\nprint(df_data_sub.head())"}
{"instruction": "Extract year and month from 'order_date' in data_clean, then plot monthly average 'age'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['order_date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['age'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average age')\nplt.show()"}
{"instruction": "Create a pivot table from data with index 'class' and values 'score'.", "output": "pivot = data.pivot_table(index='class', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Extract year and month from 'date' in sales_df, then plot monthly average 'revenue'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['revenue'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average revenue')\nplt.show()"}
{"instruction": "Create a pivot table from df1 with index 'city' and values 'speed'.", "output": "pivot = df1.pivot_table(index='city', values='speed', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Find the top 3 rows in df2 with highest 'speed'.", "output": "top3 = df2.nlargest(3, 'speed')\nprint(top3)"}
{"instruction": "Extract year and month from 'sale_date' in sales_df, then plot monthly average 'quantity'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nsales_df['year_month'] = pd.to_datetime(sales_df['sale_date']).dt.to_period('M')\nmonthly = sales_df.groupby('year_month')['quantity'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average quantity')\nplt.show()"}
{"instruction": "Create a pivot table from df_data with index 'city' and values 'quantity'.", "output": "pivot = df_data.pivot_table(index='city', values='quantity', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Convert categorical column 'region' in df_sales to one-hot encoding.", "output": "df_sales_ohe = pd.get_dummies(df_sales, columns=['region'])\nprint(df_sales_ohe.head())"}
{"instruction": "Merge sales_df with df2 on 'speed' with inner join.", "output": "merged = sales_df.merge(df2, on='speed', how='inner')\nprint(merged.head())"}
{"instruction": "Plot value counts of 'status' in df as a bar chart.", "output": "import matplotlib.pyplot as plt\ndf['status'].value_counts().plot(kind='bar')\nplt.title('Value Counts of status')\nplt.show()"}
{"instruction": "Group dataset by 'region' and calculate mean of 'quantity'.", "output": "grouped = dataset.groupby('region')['quantity'].mean()\nprint(grouped)"}
{"instruction": "Compute a rolling average of window size 5 on 'weight' in df.", "output": "df['weight_rolling'] = df['weight'].rolling(window=5).mean()"}
{"instruction": "Count unique values in 'speed' of data_clean.", "output": "unique_count = data_clean['speed'].nunique()\nprint(unique_count)"}
{"instruction": "Convert 'quantity' in df2 to datetime format.", "output": "import pandas as pd\ndf2['quantity'] = pd.to_datetime(df2['quantity'])"}
{"instruction": "Create a pivot table from df with index 'class' and values 'revenue'.", "output": "pivot = df.pivot_table(index='class', values='revenue', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Compute a rolling average of window size 5 on 'income' in dataset.", "output": "dataset['income_rolling'] = dataset['income'].rolling(window=5).mean()"}
{"instruction": "Sort sales_df by 'rating' descending.", "output": "sales_df = sales_df.sort_values(by='rating', ascending=False)"}
{"instruction": "Perform time series resampling: sum 'income' monthly in df2.", "output": "import pandas as pd\ndf2['date'] = pd.to_datetime(df2['date'])\nresampled = df2.set_index('date').resample('M')['income'].sum()\nprint(resampled)"}
{"instruction": "Group df1 by 'status' and calculate mean of 'height'.", "output": "grouped = df1.groupby('status')['height'].mean()\nprint(grouped)"}
{"instruction": "Create a pivot table from df with index 'status' and values 'price'.", "output": "pivot = df.pivot_table(index='status', values='price', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter df for rows where 'price' contains 'A'.", "output": "df_sub = df[df['price'].str.contains('A')]\nprint(df_sub.head())"}
{"instruction": "Sort dataset by 'speed' descending.", "output": "dataset = dataset.sort_values(by='speed', ascending=False)"}
{"instruction": "Group df by 'class' and calculate mean of 'speed'.", "output": "grouped = df.groupby('class')['speed'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'price' in dataset to 'new_price'.", "output": "dataset = dataset.rename(columns={'price': 'new_price'})"}
{"instruction": "Create a pivot table from df_sales with index 'department' and values 'sales'.", "output": "pivot = df_sales.pivot_table(index='department', values='sales', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Filter data_raw for rows where 'quantity' > 100.", "output": "data_raw_filtered = data_raw[data_raw['quantity'] > 100]"}
{"instruction": "Rename column 'revenue' in df2 to 'new_revenue'.", "output": "df2 = df2.rename(columns={'revenue': 'new_revenue'})"}
{"instruction": "Group data_clean by 'type' and calculate mean of 'weight'.", "output": "grouped = data_clean.groupby('type')['weight'].mean()\nprint(grouped)"}
{"instruction": "Rename column 'age' in sales_df to 'new_age'.", "output": "sales_df = sales_df.rename(columns={'age': 'new_age'})"}
{"instruction": "Extract year and month from 'sale_date' in data_raw, then plot monthly average 'value'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_raw['year_month'] = pd.to_datetime(data_raw['sale_date']).dt.to_period('M')\nmonthly = data_raw.groupby('year_month')['value'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average value')\nplt.show()"}
{"instruction": "Extract year and month from 'sale_date' in data_clean, then plot monthly average 'height'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['sale_date']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['height'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average height')\nplt.show()"}
{"instruction": "Filter df for rows where 'sales' > 100.", "output": "df_filtered = df[df['sales'] > 100]"}
{"instruction": "Plot a boxplot of 'income' grouped by 'region' in sales_df.", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x='region', y='income', data=sales_df)\nplt.title('Boxplot of income by region')\nplt.show()"}
{"instruction": "Extract year and month from 'timestamp' in data_clean, then plot monthly average 'weight'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata_clean['year_month'] = pd.to_datetime(data_clean['timestamp']).dt.to_period('M')\nmonthly = data_clean.groupby('year_month')['weight'].mean()\nmonthly.plot(kind='line', marker='o')\nplt.title('Monthly Average weight')\nplt.show()"}
{"instruction": "Group df1 by 'category' and calculate mean of 'height'.", "output": "grouped = df1.groupby('category')['height'].mean()\nprint(grouped)"}
{"instruction": "Filter data for rows where 'income' > 100.", "output": "data_filtered = data[data['income'] > 100]"}
{"instruction": "Find the top 3 rows in data_raw with highest 'value'.", "output": "top3 = data_raw.nlargest(3, 'value')\nprint(top3)"}
{"instruction": "Drop rows where 'speed' is null in data_clean.", "output": "data_clean = data_clean.dropna(subset=['speed'])"}
{"instruction": "Convert 'weight' in df2 to datetime format.", "output": "import pandas as pd\ndf2['weight'] = pd.to_datetime(df2['weight'])"}
{"instruction": "Convert categorical column 'group' in data_raw to one-hot encoding.", "output": "data_raw_ohe = pd.get_dummies(data_raw, columns=['group'])\nprint(data_raw_ohe.head())"}
{"instruction": "Group data_raw by 'type' and calculate mean of 'score'.", "output": "grouped = data_raw.groupby('type')['score'].mean()\nprint(grouped)"}
{"instruction": "Fill missing values in 'price' of data_raw with the median.", "output": "data_raw['price'] = data_raw['price'].fillna(data_raw['price'].median())"}
{"instruction": "Count unique values in 'age' of df1.", "output": "unique_count = df1['age'].nunique()\nprint(unique_count)"}
{"instruction": "Create a pivot table from df with index 'status' and values 'score'.", "output": "pivot = df.pivot_table(index='status', values='score', aggfunc='sum')\nprint(pivot)"}
{"instruction": "Group sales_df by 'city' and calculate mean of 'salary'.", "output": "grouped = sales_df.groupby('city')['salary'].mean()\nprint(grouped)"}
{"instruction": "Group sales_df by 'region' and calculate mean of 'count'.", "output": "grouped = sales_df.groupby('region')['count'].mean()\nprint(grouped)"}
{"instruction": "Perform time series resampling: sum 'duration' monthly in df1.", "output": "import pandas as pd\ndf1['date'] = pd.to_datetime(df1['date'])\nresampled = df1.set_index('date').resample('M')['duration'].sum()\nprint(resampled)"}
{"instruction": "Drop rows where 'weight' is null in df2.", "output": "df2 = df2.dropna(subset=['weight'])"}
